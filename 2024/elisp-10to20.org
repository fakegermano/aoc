#+title: Elisp 10to20

#+name: input-file
#+begin_src elisp :var fname=""
(f-read fname)
#+end_src

* Day 11

#+name: example-11a
#+begin_example
125 17
#+end_example

#+name: simulate-blinks
#+begin_src elisp :var input=example-11a :var blinks=6
(defun split-digits-evenp (number)
  "splits the digits of a number in half if even else return nil"
  (when-let* ((digits (number-to-string number))
              (len (length digits))
              (_ (cl-evenp len))
              (mid (/ len 2)))
    (mapcar 'string-to-number (list (substring digits 0 mid)
                                    (substring digits mid len)))))
(defun blink-sim (stones blinks)
  "return len of arrengement after blinks"
  (let ((memo (make-hash-table)))
    (puthash 0 '(1) memo)
    (puthash 1 '(2024) memo)
    (dotimes (i blinks)
      (setq stones (apply 'append (mapcar (lambda (stone)
                                     (or (gethash stone memo)
                                         (puthash stone (if-let ((split (split-digits-evenp stone)))
                                                            split
                                                          (list (* stone 2024)))
                                                  memo)))
                                   stones))))
    (length stones)))

(let* ((stones (mapcar 'string-to-number (s-split " " (s-trim input)))))
  (blink-sim stones blinks))
#+end_src

#+RESULTS: simulate-blinks
: 22

#+call: simulate-blinks(input=input-file("input-11.txt"),blinks=25)

#+name: count-blink
#+begin_src elisp :var input=example-11a :var blinks=6
(defun split-digits-evenp (number)
  "splits the digits of a number in half if even else return nil"
  (when-let* ((digits (number-to-string number))
              (len (length digits))
              (_ (cl-evenp len))
              (mid (/ len 2)))
    (mapcar 'string-to-number (list (substring digits 0 mid)
                                    (substring digits mid len)))))

(defun blink-stone (stone blink-memo)
  "return the list of the result of blinking to the stone"
  (or (gethash stone blink-memo)
      (puthash stone (if-let ((split (split-digits-evenp stone)))
                         split
                       (list (* stone 2024)))
               blink-memo)))

(defun print-count (stones-count)
  "print stones count hash table"
  (let ((counts))
    (maphash (lambda (stone count)
               (push (list stone count) counts))
             stones-count)
    (message "%s" counts)))

(defun blink (stones blink-memo)
  "count number of stones after blinks"
  ;;(print-count stones)
  (let ((next-stones (make-hash-table)))
    (maphash (lambda (stone count)
               (mapc (lambda (next-stone)
                       (if-let ((next-count (gethash next-stone next-stones)))
                           (puthash next-stone (+ next-count count) next-stones)
                         (puthash next-stone count next-stones))
                       ;;(print-count next-stones)
                       )
                     (blink-stone stone blink-memo)))
             stones)
    next-stones))

(let* ((stones (mapcar 'string-to-number (s-split " " (s-trim input))))
       (stones-count (make-hash-table))
       (blink-memo (make-hash-table))
       (total 0))
  (mapc (lambda (stone)
          (if-let ((count (gethash stone stones-count)))
              (puthash stone (1+ count) stones-count)
            (puthash stone 1 stones-count)))
        stones)
  (puthash 0 '(1) blink-memo)
  (dotimes (i blinks)
    (setq stones-count (blink stones-count blink-memo)))
  (maphash (lambda (_ count) (setq total (+ total count))) stones-count)
  total)
#+end_src

#+RESULTS: count-blink
: 22

#+call: count-blink(blinks=25)

#+RESULTS:
: 55312

#+call: count-blink(input=input-file("input-11.txt"),blinks=25)


#+call: count-blink(input=input-file("input-11.txt"),blinks=75)



* Day 12

#+name: example-12a
#+begin_example
AAAA
BBCD
BBCC
EEEC
#+end_example

#+name: example-12b
#+begin_example
OOOOO
OXOXO
OOOOO
OXOXO
OOOOO
#+end_example

#+name: example-12c
#+begin_example
RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE
#+end_example

#+name: calculate-price
#+begin_src elisp :var input=example-12a
(defun flood-fill-area-perimeter (farm seed)
  "uses flood-fill algorithm to find area and perimeter"
  (let* ((m (length farm))
         (n (length (aref farm 0)))
         (plant (aref (aref farm (car seed)) (cdr seed)))
         (stack)
         (area)
         (perimeter)
         (insidep (lambda (node)
                    (let ((inside (and (>= (car node) 0)
                                       (< (car node) m)
                                       (>= (cdr node) 0)
                                       (< (cdr node) n)
                                       (= (aref (aref farm (car node)) (cdr node)) plant))))
                      inside))))
    (push seed stack)
    (while-let ((node (pop stack)))
      (if (funcall insidep node)
          (unless (member node area)
            (push node area)
            (mapc (lambda (side)
                    (push (cons (+ (car node) (car side)) (+ (cdr node) (cdr side)))
                          stack))
                  '((-1 . 0) (1 . 0) (0 . -1) (0 . 1))))
        (push node perimeter)))
    ;;(message "%c %s %s" plant area perimeter)
    (list area perimeter)))

(let* ((farm (vconcat (mapcar 'string-to-vector (s-lines (s-trim input)))))
       (prices)
       (m (length farm))
       (n (length (aref farm 0)))
       (visited (make-vector (* m n) nil)))
  (dotimes (i m)
    (dotimes (j n)
      (when-let ((seed (cons i j))
                 (v (not (aref visited (+ (* i n) j))))
                 (price (flood-fill-area-perimeter farm seed))
                 (plant (aref (aref farm i) j)))
        ;; make sure to mark all nodes in region as visited to avoid double work
        (mapc (lambda (node)
                (aset visited (+ (* (car node) n) (cdr node)) t))
              (car price))
        (push (cons plant price) prices))))
  (apply '+ (mapcar (lambda (p)
                      (let* ((area (length (cadr p)))
                             (perimeter (length (caddr p)))
                             (plant (car p))
                             (price (* area perimeter)))
                        ;;(message "%c: [A:%d P:%d] %d" plant area perimeter price)
                        price))
                    prices)))
#+end_src

#+RESULTS:
: 140

#+call: calculate-price(input=example-12b)

#+RESULTS:
: 772


#+call: calculate-price(input=example-12c)

#+RESULTS:
: 1930

#+call: calculate-price(input=input-file("input-12.txt"))

#+name: calculate-price-discount
#+begin_src elisp :var input=example-12a
(defun map-as-list (map)
  "convert map to list with (key value) ordered by key"
  (let ((list-map))
    (maphash (lambda (key value)
               (push (list key value) list-map))
             map)
    (cl-sort list-map #'< :key #'car)
    list-map))

(defun map-coords (coords m n symfull symempty)
  "map the coordinate list as a matrix filling the i/j
with symfull at coordinate points and symempty otherwise"
  (let ((map (make-vector (* m n) symempty)))
    (mapc (lambda (c)
            (aset map (+ (* (car c) n) (cdr c)) symfull))
          coords)
    (mapconcat #'concat (seq-split map n) "\n")))

(defun compress-car (seq)
  "compresses a sorted sequence of cons by identifying increasing car values (when cdr is the same)"
  (let ((compressed))
    (dolist (c seq)
      ;; (message "%s %sx%s [%s+1=%s] [%s=%s]" compressed (car compressed) c (car (car compressed)) (car c) (cdr (car compressed)) (cdr c))
      (cond
       ((null compressed) nil)
       ((and (= (cdr (car compressed)) (cdr c))
             (= (car (car compressed)) (1- (car c))))
        (pop compressed)))
       (push c compressed))
    compressed))

(defun compress-cdr (seq)
  "compresses a sorted sequence of cons by identifying increasing cdr values (when car is the same)"
  (let ((compressed))
    (dolist (c seq)
      ;; (message "%s %sx%s [%s=%s] [%s+1=%s]" compressed (car compressed) c (car (car compressed)) (car c) (cdr (car compressed)) (cdr c))
      (cond
       ((null compressed) nil)
       ((and (= (car (car compressed)) (car c))
             (= (cdr (car compressed)) (1- (cdr c))))
        (pop compressed)))
      (push c compressed))
    compressed))

(defun less-car-cdr (u v)
  "compares if a cons is less then other looking at car first then at cdr"
  (if (= (car u) (car v))
      (< (cdr u) (cdr v))
    (< (car u) (car v))))

(defun less-cdr-car (u v)
  "compares if a cons is less then other looking at cdr first then at car"
  (if (= (cdr u) (cdr v))
      (< (car u) (car v))
    (< (cdr u) (cdr v))))

(defun flood-fill-area-perimeter (farm seed)
  "uses flood-fill algorithm to find area and perimeter"
  (let* ((m (length farm))
         (n (length (aref farm 0)))
         (plant (aref (aref farm (car seed)) (cdr seed)))
         (stack)
         (area)
         (perimeter-up)
         (perimeter-down)
         (perimeter-left)
         (perimeter-right)
         (perimeter)
         (insidep (lambda (node)
                    (let ((inside (and (>= (car node) 0)
                                       (< (car node) m)
                                       (>= (cdr node) 0)
                                       (< (cdr node) n)
                                       (= (aref (aref farm (car node)) (cdr node)) plant))))
                      inside))))
    (push seed stack)
    (while-let ((node (pop stack)))
      (unless (member node area)
        (push node area)
        (mapc (lambda (side)
                (let ((next (cons (+ (car node) (car side))
                                  (+ (cdr node) (cdr side)))))
                  (if (funcall insidep next)
                      (push next stack)
                    (pcase side
                      ('(-1 . 0) (push next perimeter-up))
                      ('(1 . 0) (push next perimeter-down))
                      ('(0 . -1) (push next perimeter-left))
                      ('(0 . 1) (push next perimeter-right))))))
              '((-1 . 0) (1 . 0) (0 . -1) (0 . 1)))))

    (cl-sort perimeter-up 'less-car-cdr)
    (cl-sort perimeter-down 'less-car-cdr)
    (cl-sort perimeter-left 'less-cdr-car)
    (cl-sort perimeter-right 'less-cdr-car)

    ;; (message "%s\n" (map-coords area m n plant ?.))
    (setq perimeter (append (compress-cdr perimeter-up)
                            (compress-cdr perimeter-down)
                            (compress-car perimeter-left)
                            (compress-car perimeter-right)))
    ;; (message "%s\n" (map-coords (mapcar (lambda (c) (cons (1+ (car c)) (1+ (cdr c)))) perimeter) (+ m 2) (+ n 2) ?# ?.))
    (list area perimeter)))

(let* ((farm (vconcat (mapcar 'string-to-vector (s-lines (s-trim input)))))
       (prices)
       (m (length farm))
       (n (length (aref farm 0)))
       (visited (make-vector (* m n) nil)))
  (dotimes (i m)
    (dotimes (j n)
      (when-let ((seed (cons i j))
                 (v (not (aref visited (+ (* i n) j))))
                 (price (flood-fill-area-perimeter farm seed))
                 (plant (aref (aref farm i) j)))
        ;; make sure to mark all nodes in region as visited to avoid double work
        (mapc (lambda (node)
                (aset visited (+ (* (car node) n) (cdr node)) t))
              (car price))
        (push (cons plant price) prices))))
  (apply '+ (mapcar (lambda (p)
                      (let* ((area (length (cadr p)))
                             (perimeter (length (caddr p)))
                             (plant (car p))
                             (price (* area perimeter)))
                        ;; (message "%c: [A:%d P:%d] %d" plant area perimeter price)
                        price))
                    prices)))
#+end_src

#+RESULTS: calculate-price-discount
: 80

#+call: calculate-price-discount(input=example-12b)

#+RESULTS:
: 436

#+name: example-12d
#+begin_example
EEEEE
EXXXX
EEEEE
EXXXX
EEEEE
#+end_example


#+call: calculate-price-discount(input=example-12d)

#+RESULTS:
: 236

#+name: example-12e
#+begin_example
AAAAAA
AAABBA
AAABBA
ABBAAA
ABBAAA
AAAAAA
#+end_example

#+call: calculate-price-discount(input=example-12e)

#+RESULTS:
: 368

#+call: calculate-price-discount(input=input-file("input-12.txt"))

#+RESULTS:
: 844132


* Day 13

#+name: example-13a
#+begin_example
Button A: X+94, Y+34
Button B: X+22, Y+67
Prize: X=8400, Y=5400

Button A: X+26, Y+66
Button B: X+67, Y+21
Prize: X=12748, Y=12176

Button A: X+17, Y+86
Button B: X+84, Y+37
Prize: X=7870, Y=6450

Button A: X+69, Y+23
Button B: X+27, Y+71
Prize: X=18641, Y=10279
#+end_example

#+name: fewest-tokens
#+begin_src elisp :var input=example-13a
(defun solve (machine)
  (let* ((A (car machine))
         (B (cadr machine))
         (P (caddr machine))
         (Ax (car A))
         (Ay (cdr A))
         (Bx (car B))
         (By (cdr B))
         (X (car P))
         (Y (cdr P))
         (b (/ (- (* Y Ax) (* X Ay)) (- (* Ax By) (* Ay Bx))))
         (a (/ (- X (* b Bx)) Ax)))
    (message "a: %d b: %d" a b)
    (when (and (= (+ (* a Ax) (* b Bx)) X)
               (= (+ (* a Ay) (* b By)) Y))
      (message "\twinnable!")
      (+ (* a 3) b))))

(let ((machines (mapcar (lambda (l)
                          (mapcar (lambda (g) (cons (string-to-number (car g)) (string-to-number (cadr g))))
                                  (list (cdr (s-match (rx "Button A: X+" (group (+ num)) ", Y+" (group (+ num))) (car l)))
                                        (cdr (s-match (rx "Button B: X+" (group (+ num)) ", Y+" (group (+ num))) (cadr l)))
                                        (cdr (s-match (rx "Prize: X=" (group (+ num)) ", Y=" (group (+ num))) (caddr l))))))
                        (mapcar 'butlast (seq-split (s-lines input) 4)))))
  (apply #'+ (seq-filter #'identity (mapcar 'solve machines))))
#+end_src

#+RESULTS:
: 480

#+call: fewest-tokens(input=input-file("input-13.txt"))

#+name: fewest-tokens-corrected
#+begin_src elisp :var input=example-13a
(defun solve (machine)
  (let* ((A (car machine))
         (B (cadr machine))
         (P (caddr machine))
         (Ax (car A))
         (Ay (cdr A))
         (Bx (car B))
         (By (cdr B))
         (X (+ (car P) 10000000000000))
         (Y (+ (cdr P) 10000000000000))
         (b (/ (- (* Y Ax) (* X Ay)) (- (* Ax By) (* Ay Bx))))
         (a (/ (- X (* b Bx)) Ax)))
    (message "a: %d b: %d" a b)
    (when (and (= (+ (* a Ax) (* b Bx)) X)
               (= (+ (* a Ay) (* b By)) Y))
      (message "\twinnable!")
      (+ (* a 3) b))))

(let ((machines (mapcar (lambda (l)
                          (mapcar (lambda (g) (cons (string-to-number (car g)) (string-to-number (cadr g))))
                                  (list (cdr (s-match (rx "Button A: X+" (group (+ num)) ", Y+" (group (+ num))) (car l)))
                                        (cdr (s-match (rx "Button B: X+" (group (+ num)) ", Y+" (group (+ num))) (cadr l)))
                                        (cdr (s-match (rx "Prize: X=" (group (+ num)) ", Y=" (group (+ num))) (caddr l))))))
                        (mapcar 'butlast (seq-split (s-lines input) 4)))))
  (apply #'+ (seq-filter #'identity (mapcar 'solve machines))))
#+end_src

#+RESULTS: fewest-tokens-corrected
: 875318608908

#+call: fewest-tokens-corrected(input=input-file("input-13.txt"))



* Day 14
#+name: example-14a
#+begin_example
p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3
#+end_example

#+name: example-14b
#+begin_example
p=2,4 v=2,-3
#+end_example


#+name: robot-positions
#+begin_src elisp :var input=example-14a :var n=11 :var m=7 :var seconds=100
(defun print-positions (positions)
  "print positions in a map that is nxm"
  (let ((map (make-vector (* m n) nil)))
    (mapc (lambda (p)
            (let* ((pos (+ (* (cadr p) n) (car p)))
                   (curr (aref map pos)))
              (if curr
                  (aset map pos (1+ curr))
                (aset map pos 1))))
          positions)
    (mapconcat #'identity (mapcar (lambda (line) (mapconcat (lambda (p) (if p
                                                                            (number-to-string p)
                                                                          "."))
                                                            line ""))
                                  (seq-split map n))
               "\n")))

(defun get-quadrant (positions x y)
  "from list of positions make return only the ones on the quadrant (x1 to x2) and (y1 to y2)"
  (let ((quadrant))
    (mapc (lambda (p)
            (when (and (<= (car x) (car p) (cdr x))
                       (<= (car y) (cadr p) (cdr y)))
              (push p quadrant)))
          positions)
    quadrant))

(let* ((parsed (mapcar (lambda (l) (mapcar (lambda (v)
                                             (mapcar 'string-to-number
                                                     (s-split "," (cadr (s-split "=" v)))))
                                           (s-split " " l)))
                       (s-lines (s-trim input))))
       (final-positions (mapcar (lambda (robot)
                                  (let* ((p (car robot))
                                         (v (cadr robot))
                                         (x-after (% (+ (car p) (* (car v) seconds)) n))
                                         (y-after (% (+ (cadr p) (* (cadr v) seconds)) m)))
                                    (when (< x-after 0)
                                      (setq x-after (+ x-after n)))
                                    (when (< y-after 0)
                                      (setq y-after (+ y-after m)))
                                    (list x-after y-after)))
                                parsed))
       (q1 (get-quadrant final-positions (cons 0 (1- (/ n 2))) (cons 0 (1- (/ m 2)))))
       (q2 (get-quadrant final-positions (cons 0 (1- (/ n 2))) (cons (1+ (/ m 2)) m)))
       (q3 (get-quadrant final-positions (cons (1+ (/ n 2)) n) (cons 0 (1- (/ m 2)))))
       (q4 (get-quadrant final-positions (cons (1+ (/ n 2)) n) (cons (1+ (/ m 2)) m))))
  (message "initial:\n%s\n" (print-positions (mapcar 'car parsed)))
  (message "final:\n%s\n" (print-positions final-positions))
  (* (length q1) (length q2) (length q3) (length q4)))
#+end_src

#+RESULTS: robot-positions
: 12

#+call: robot-positions(input=example-14b,seconds=5)

#+RESULTS:
: 0

#+call:robot-positions(input=input-file("input-14.txt"),seconds=100,n=101,m=103)

#+RESULTS:
: 224554908

#+name: robot-easter-egg-hunt
#+begin_src elisp :var input=example-14a :var n=11 :var m=7 :var seconds=100
(defun print-positions (positions)
  "print positions in a map that is nxm"
  (let ((map (make-vector (* m n) nil)))
    (mapc (lambda (p)
            (let* ((pos (+ (* (cadr p) n) (car p)))
                   (curr (aref map pos)))
              (if curr
                  (aset map pos (1+ curr))
                (aset map pos 1))))
          positions)
    (mapconcat #'identity (mapcar (lambda (line) (mapconcat (lambda (p) (if p
                                                                            (number-to-string p)
                                                                          "."))
                                                            line ""))
                                  (seq-split map n))
               "\n")))

(let* ((parsed (mapcar (lambda (l) (mapcar (lambda (v)
                                             (mapcar 'string-to-number
                                                     (s-split "," (cadr (s-split "=" v)))))
                                           (s-split " " l)))
                       (s-lines (s-trim input))))
       (next parsed)
       (possible-tree)
       (i 0)
       (min-entropy '(-1 . 1.0)))

  ;;(message "initial:\n%s\n" (print-positions (mapcar 'car parsed)))
  (while (null possible-tree)
    (setq i (1+ i))
    (setq next (mapcar (lambda (robot)
                         (let* ((p (car robot))
                                (v (cadr robot))
                                (x-after (% (+ (car p) (* (car v) 1)) n))
                                (y-after (% (+ (cadr p) (* (cadr v) 1)) m)))
                           (when (< x-after 0)
                             (setq x-after (+ x-after n)))
                           (when (< y-after 0)
                             (setq y-after (+ y-after m)))
                           (list (list x-after y-after) v)))
                       next))
        (when (= (length next) (length (seq-uniq (mapcar (lambda (p) (+ (* (cadr p) n) (car p))) (mapcar 'car next)))))
      (setq min-entropy i)
      (setq possible-tree (mapcar 'car next))))
  (message "tree:\n%s\n" (print-positions possible-tree))
  min-entropy)
#+end_src

#+RESULTS: robot-easter-egg-hunt
: 0

#+call: robot-easter-egg-hunt(input=input-file("input-14.txt"),n=101,m=103)

#+RESULTS:
: 6643


* Day 15

#+name: example-15a
#+begin_example
##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^
#+end_example

#+name: example-15b
#+begin_example
########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

<^^>>>vv<v>>v<<
#+end_example

#+name: move-push-and-gps
#+begin_src elisp :var input=example-15b
(defun print-map (map m n)
  "prints the map as matrix"
  (mapconcat 'identity (mapcar 'concat (seq-split map n)) "\n"))

(defun move-and-push (d map p m n)
  "return the new position after moving in the direction
pushes all boxes that can be pushed if any"
  (let ((move)
        (la 0)
        (boxes))
    (pcase d
      (?^
       (setq move (* -1 n)))
      (?v
       (setq move n))
      (?<
       (setq move -1))
      (?>
       (setq move 1)))
    (setq la (+ p move))
    (pcase (aref map la)
     (?# p)
     (?O
      (push la boxes)
      (setq la (+ la move))
      (while (= (aref map la) ?O)
        (push la boxes)
        (setq la (+ la move)))
      (if (= (aref map la) ?.)
           (progn
             (while-let ((box (pop boxes)))
               (aset map box ?.)
               (aset map la ?O)
               (setq la box))
             la)
         p))
     (?. la))))

(let* ((parsed (s-split "||" (s-replace "\n" "|" (s-trim input))))
       (map (vconcat (mapcar 'string-to-vector (s-split "|" (car parsed)))))
       (m (length map))
       (n (length (aref map 0)))
       (flatmap (string-to-vector (mapconcat #'identity map "")))
       (pos (seq-position flatmap ?@))
       (movements (string-to-list (s-replace "|" "" (cadr parsed)))))
  (while-let ((dir (pop movements)))
    (aset flatmap pos ?.)
    (setq pos (move-and-push dir flatmap pos m n))
    (aset flatmap pos ?@))
  (message "%s" (print-map flatmap m n))
  (apply #'+ (mapcar (lambda (p) (+ (* (/ p n) 100) (% p n)))
                     (seq-positions flatmap ?O))))
#+end_src

#+RESULTS: move-push-and-gps
: 2028

#+call: move-push-and-gps(input=example-15a)

#+RESULTS:
: 10092

#+call: move-push-and-gps(input=input-file("input-15.txt"))

#+name: example-15c
#+begin_example
#######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^
#+end_example


#+name: move-push-and-gps-wide
#+begin_src elisp :var input=example-15c
(defun print-wide-map (map m n)
  "prints the map as matrix"
  (mapconcat 'identity (mapcar 'concat (seq-split map n)) "\n"))

(defun push-horizontal (map move p)
  "push boxes horizontally following move"
  (let ((la (+ p move))
        (boxes))
    (pcase (aref map la)
      (?. la)
      (?# p)
      (_
       (push la boxes)
       (setq la (+ p move))
       (while (or (= (aref map la) ?\[)
                  (= (aref map la) ?\]))
         (push la boxes)
         (setq la (+ la move)))

       (if (= (aref map la) ?.)
           (progn
             (while-let ((box (pop boxes)))
               (aset map la (aref map box))
               (aset map box ?.)
               (setq la box))
             la)
         p)))))

(defun push-vertical (map move p)
  "push boxes vertically following move"
  (let ((la)
        (boxes))
    (pcase (aref map (+ p move))
      (?. (+ p move))
      (?# p)
      (_
       (when (= (aref map (+ p move)) ?\[)
         (push (cons (+ p move) (+ p move 1)) la))
       (when (= (aref map (+ p move)) ?\])
         (push (cons (+ p move -1) (+ p move)) la))

       (while-let ((boxla (pop la))
                   (lla (aref map (car boxla)))
                   (rla (aref map (cdr boxla))))
         (cond
          ((and (= lla ?\[) (= rla ?\]))
           (unless (member boxla boxes)
             (push (cons (+ (car boxla) move) (+ (cdr boxla) move)) la)
             (push boxla boxes)))
          ((or (= lla ?\]) (= rla ?\[))
           (when (= lla ?\])
             (unless (member (cons (1- (car boxla)) (car boxla)) boxes)
               (push (cons (+ (car boxla) move -1) (+ (car boxla) move)) la)
               (push (cons (1- (car boxla)) (car boxla)) boxes)))
           (when (= rla ?\[)
             (unless (member (cons (cdr boxla) (1+ (cdr boxla))) boxes)
               (push (cons (+ (cdr boxla) move) (+ (cdr boxla) move 1)) la)
               (push (cons (cdr boxla) (1+ (cdr boxla))) boxes))))))

       (mapc (lambda (b)
               (push (+ (car b) move) la)
               (push (+ (cdr b) move) la))
             boxes)
       (if (seq-every-p (lambda (c) (not (= (aref map c) ?#))) la)
           (progn
             (if (< move 0)
                 ;; sort smalest first
                 (cl-sort boxes #'< :key #'car)
               ;; sort largest first
               (cl-sort boxes #'> :key #'car))
             (while-let ((box (pop boxes))
                         (current (cons (aref map (car box)) (aref map (cdr box))))
                         (ahead (cons (aref map (+ (car box) move)) (aref map (+ (cdr box) move)))))
               (aset map (+ (car box) move) (car current))
               (aset map (+ (cdr box) move) (cdr current))
               (aset map (car box) (car ahead))
               (aset map (cdr box) (cdr ahead)))
             (+ p move))
         p)
       ))))

(defun move-and-push-wide (d map p m n)
  "return the new position after moving in the direction
pushes all boxes that can be pushed if any"
  (pcase d
    (?^
     (push-vertical map (* -1 n) p))
    (?v
     (push-vertical map n p))
    (?<
     (push-horizontal map -1 p))
    (?>
     (push-horizontal map 1 p))))

(let* ((parsed (s-split "||" (s-replace "\n" "|" (s-trim input))))
       (map (vconcat (mapcar (lambda (s) (string-to-vector (s-replace-all
                                                            '(("#" . "##")
                                                              ("O" . "[]")
                                                              ("." . "..")
                                                              ("@" . "@."))
                                                            s)))
                             (s-split "|" (car parsed)))))
       (m (length map))
       (n (length (aref map 0)))
       (flatmap (string-to-vector (mapconcat #'identity map "")))
       (pos (cl-position ?@ flatmap))
       (movements (string-to-list (s-replace "|" "" (cadr parsed)))))

  ;; (with-output-to-temp-buffer "*move-push-wide*"
  ;;   (print! "%s\n" (print-wide-map flatmap m n))
    (while-let ((dir (pop movements)))
      (aset flatmap pos ?.)
      (setq pos (move-and-push-wide dir flatmap pos m n))
      (aset flatmap pos ?@)

      ;; (print! "%c\n%s\n" dir (print-wide-map flatmap m n)))
    )

    (message "%s" (print-wide-map flatmap m n))
    (apply #'+ (mapcar (lambda (p) (+ (* (/ p n) 100) (% p n)))
                       (seq-positions flatmap ?\[)))
  )
#+end_src

#+RESULTS: move-push-and-gps-wide
: 618

#+call: move-push-and-gps-wide(input=example-15a)

#+RESULTS:
: 9021

#+call: move-push-and-gps-wide(input=example-15b)

#+RESULTS:
: 1751

#+name: example-15d
#+begin_example
#########
#.OOOO..#
#.O....O#
#..O.OO.#
#@OO..O.#
#..OO..O#
#O.OO...#
#..OO..##
#..O..O.#
#.......#
#.......#
#########

>>vvvv>>v>>>>^^^^^<^^<<v
#+end_example

#+call: move-push-and-gps-wide(input=example-15d)

#+RESULTS:
: 10375


#+call: move-push-and-gps-wide(input=input-file("input-15.txt"))
