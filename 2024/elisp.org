#+title: Elisp AoC tryouts

* Day 1
#+name: example-1a
#+begin_example
3   4
4   3
2   5
1   3
3   9
3   3
#+end_example

#+name: input-file
#+begin_src elisp :var fname=""
(f-read fname)
#+end_src


#+name: process-input
#+begin_src elisp :var input=example-1a()
(mapcar (lambda (e) (mapcar #'string-to-number (s-split "\s+" e))) (s-lines (s-trim input)))
#+end_src

#+RESULTS: process-input
| 3 | 4 |
| 4 | 3 |
| 2 | 5 |
| 1 | 3 |
| 3 | 9 |
| 3 | 3 |

#+name: calculate-1a
#+begin_src elisp :var input=process-input()
(let ((left (sort (mapcar #'car input) #'<))
      (right (sort (mapcar (lambda (l) (cadr l)) input) #'<))
      (difference 0))
  (cl-loop for l in left for r in right collect (setq difference (+ difference (abs (- l r)))))
  difference)
#+end_src

#+RESULTS: calculate-1a
: 11

#+call: calculate-1a(process-input(input-file("input-1.txt")))

#+name: calculate-1b
#+begin_src elisp :var input=process-input()
(let ((left (sort (mapcar #'car input) #'<))
      (right (sort (mapcar (lambda (l) (cadr l)) input) #'<))
      (total 0))
  (cl-loop for l in left collect (setq total (+ total (* l (count l right)))))
  total)
#+end_src

#+RESULTS:
: 31

#+call: calculate-1b(process-input(input-file("input-1.txt")))

* Day 2

#+name: example-2a
#+begin_example
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
#+end_example

#+name: calculate-2a
#+begin_src elisp :var input=process-input(example-2a)
(defun safe (level)
  "checks if a level is safe aka only increasing, only decreasing and by 1, 2 or 3"
  (let ((diff (mapcar (lambda (l) (- (car l) (cdr l)))
                      (cl-pairlis level (cdr level)))))
    (or (cl-every (lambda (l) (and (< l 0)
                                   (> l -4))) diff)
        (cl-every (lambda (l) (and (> l 0)
                                   (< l 4))) diff))))
(cl-count t (mapcar #'safe input))
#+end_src

#+RESULTS:
: 2

#+call: calculate-2a(process-input(input-file("input-2.txt")))


#+name: calculate-2b
#+begin_src elisp :var input=process-input(example-2a)
(defun safe (level)
  "checks if a level is safe aka only increasing, only decreasing and by 1, 2 or 3"
  (let ((diff (mapcar (lambda (l) (- (car l) (cdr l)))
                      (cl-pairlis level (cdr level)))))
    (or (cl-every (lambda (l) (and (< l 0)
                                   (> l -4))) diff)
        (cl-every (lambda (l) (and (> l 0)
                                   (< l 4))) diff))))
(defun safe-modified (level)
  "checks if a level is safe aka only increasing, only decreasing and by 1, 2 or 3"
  (let ((sublevels (cons level (cl-mapcar (lambda (x i) (append (cl-subseq level 0 i) (cl-subseq level (1+ i)))) level (number-sequence 0 (length level))))))
    (cl-count t (mapcar 'safe sublevels))))

(cl-count-if (lambda (x) (> x 0)) (mapcar #'safe-modified input))
#+end_src

#+RESULTS: calculate-2b
: 4

#+call: calculate-2b(process-input(input-file("input-2.txt")))

* Day 3
#+name: example-3a
#+begin_example
xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))
#+end_example

#+name: extract-3a
#+begin_src elisp :var input=example-3a
(cl-reduce #'+ (mapcar (lambda (m) (cl-reduce #'* (mapcar #'string-to-number (cdr m))))
                       (s-match-strings-all (rx "mul(" (group (** 1 3 num)) "," (group (** 1 3 num)) ")") input)))
#+end_src

#+RESULTS: extract-3a
: 161

#+call: extract-3a(input-file("input-3.txt"))

#+RESULTS:
: 182780583

#+name: example-3b
#+begin_example
xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))
#+end_example

#+name: extract-3b
#+begin_src elisp :var input=example-3b
(cl-reduce #'+ (let* ((mult 1))
                 (mapcar (lambda (m) (cond ((s-equals? (cadr m) "mul") (* mult (string-to-number (caddr m)) (string-to-number (cadddr m))))
                                           ((s-equals? (cadr m) "do") (setq mult 1) 0)
                                           ((s-equals? (cadr m) "don't") (setq mult 0) 0)))
                         (s-match-strings-all (rx (or (: (group-n 1 "mul") "(" (group (** 1 3 num)) "," (group (** 1 3 num)) ")")
                                                      (: (group-n 1 "do") "()")
                                                      (: (group-n 1 "don't") "()"))) input))))
#+end_src

#+RESULTS: extract-3b
: 48

#+call: extract-3b(input-file("input-3.txt"))

#+RESULTS:
: 90772405

* Day 4

#+name: example-4a
#+begin_example
MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX
#+end_example

#+name: process-input-chars
#+begin_src elisp :var input=example-4a
(mapcar #'string-to-list (s-lines (s-trim input)))
#+end_src

#+RESULTS: process-input-chars
| 77 | 77 | 77 | 83 | 88 | 88 | 77 | 65 | 83 | 77 |
| 77 | 83 | 65 | 77 | 88 | 77 | 83 | 77 | 83 | 65 |
| 65 | 77 | 88 | 83 | 88 | 77 | 65 | 65 | 77 | 77 |
| 77 | 83 | 65 | 77 | 65 | 83 | 77 | 83 | 77 | 88 |
| 88 | 77 | 65 | 83 | 65 | 77 | 88 | 65 | 77 | 77 |
| 88 | 88 | 65 | 77 | 77 | 88 | 88 | 65 | 77 | 65 |
| 83 | 77 | 83 | 77 | 83 | 65 | 83 | 88 | 83 | 83 |
| 83 | 65 | 88 | 65 | 77 | 65 | 83 | 65 | 65 | 65 |
| 77 | 65 | 77 | 77 | 77 | 88 | 77 | 77 | 77 | 77 |
| 77 | 88 | 77 | 88 | 65 | 88 | 77 | 65 | 83 | 88 |

#+name: find-xmas
#+begin_src elisp :var input=process-input-chars(example-4a)
(defun count-xmas (list-of-chars)
  ""
  (cl-reduce #'+ (mapcar (lambda (chars)
                           (let* ((start 0)
                                  (count 0)
                                  (str (concat chars)))
                             (while (string-match "XMAS" str start)
                               (setq count (1+ count))
                               (setq start (match-end 0)))
                             count))
                         list-of-chars)))
(let* ((transposed (apply #'cl-mapcar #'list input))
       (n (length input))
       (diagonal-lr (make-list (1- (* 2 n)) nil))
       (diagonal-rl (make-list (1- (* 2 n)) nil)))
  (dotimes (i n)
    (dotimes (j n)
      (setf (elt diagonal-lr (+ i j)) (cons (nth j (nth i input)) (nth (+ i j) diagonal-lr)))
      (setf (elt diagonal-rl (+ i j)) (cons (nth j (nth (1- (- n i)) input)) (nth (+ i j) diagonal-rl)))))
  (cl-reduce #'+ (mapcar #'count-xmas (list input (mapcar #'reverse input)
                                            transposed (mapcar #'reverse transposed)
                                            diagonal-lr (mapcar #'reverse diagonal-lr)
                                            diagonal-rl (mapcar #'reverse diagonal-rl)))))
#+end_src

#+call: find-xmas(process-input-chars(input-file("input-4.txt"))))

#+name: find-x-mas
#+begin_src elisp :var input=process-input-chars(example-4a)
(let* ((n (length input)) (out) (count 0))
  (dotimes (i n)
    (dotimes (j n)
      (let* ((j- (when (> j 0) (1- j)))
             (j+ (when (< j (1- n)) (1+ j)))
             (i- (when (> i 0) (1- i)))
             (i+ (when (< i (1- n)) (1+ i)))
             (m (nth j (nth i input)))
             (tl (when (and j- i-)
                   (nth j- (nth i- input))))
             (br (when (and j+ i+)
                   (nth j+ (nth i+ input))))
             (bl (when (and j- i+)
                   (nth j- (nth i+ input))))
             (tr (when (and j+ i-)
                   (nth j+ (nth i- input))))
             (dlr (when (and tl br)
                    (concat (list tl m br))))
             (drl (when (and bl tr)
                    (concat (list bl m tr)))))
        (when (and dlr drl
                   (or (string= drl "MAS")
                       (string= drl "SAM"))
                   (or (string= dlr "MAS")
                       (string= dlr "SAM")))
          (setq count (1+ count))
          (push (list (string m) dlr drl) out)))))
  out
  count)
#+end_src

#+RESULTS: find-x-mas
: 9

#+call: find-x-mas(process-input-chars(input-file("input-4.txt")))

* Day 5

#+name: example-5a
#+begin_example
47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

75,47,61,53,29
97,61,53,29,13
75,29,13
75,97,47,61,53
61,13,29
97,13,75,29,47
#+end_example

#+name: parse-rules-updates
#+begin_src elisp :var input=example-5a
(defun print-matrix (matrix n)
  "print adj matrix as 0 and 1"
  (mapcar (lambda (r) (mapconcat (lambda (c) (if c "1" "0")) r "")) (seq-split matrix n)))
(let* ((parsed (mapcar 's-lines (s-split "\n\n" (s-trim input))))
       (rules (mapcar (lambda (r) (mapcar #'string-to-number (s-split "|" r))) (car parsed)))
       (updates (mapcar (lambda (u) (mapcar #'string-to-number (s-split "," u))) (cadr parsed)))
       (n (max (max (apply #'max (apply #'append rules)))
               (max (apply #'max (apply #'append updates)))))
       (matrix (make-vector (1- (* n n)) nil)))
  (dolist (e rules)
    (let* ((i (1- (car e)))
           (j (1- (cadr e)))
           (idx (+ (* i n) j)))
      (aset matrix idx (not (aref matrix idx)))))
  (cl-reduce #'+ (mapcar (lambda (up)
                           (if (not (seq-contains-p (mapcar (lambda (e) (aref matrix (+ (* (1- (car e)) n) (1- (cdr e))))) (cl-pairlis up (cdr up)))
                                                    nil))
                               (nth (/ (length up) 2) up)
                             0))
                         updates)))
#+end_src

#+RESULTS: parse-rules-updates
: 143

#+call: parse-rules-updates(input-file("input-5.txt"))


#+name: parse-rules-updates-correct
#+begin_src elisp :var input=example-5a
(defun print-matrix (matrix n)
  "print adj matrix as 0 and 1"
  (mapcar (lambda (r) (mapconcat (lambda (c) (if c "1" "0")) r "")) (seq-split matrix n)))
(let* ((parsed (mapcar 's-lines (s-split "\n\n" (s-trim input))))
       (rules (mapcar (lambda (r) (mapcar #'string-to-number (s-split "|" r))) (car parsed)))
       (updates (mapcar (lambda (u) (mapcar #'string-to-number (s-split "," u))) (cadr parsed)))
       (n (max (max (apply #'max (apply #'append rules)))
               (max (apply #'max (apply #'append updates)))))
       (matrix (make-vector (1- (* n n)) nil)))
  (dolist (e rules)
    (let* ((i (1- (car e)))
           (j (1- (cadr e)))
           (idx (+ (* i n) j)))
      (aset matrix idx (not (aref matrix idx)))))
  (cl-reduce #'+ (mapcar (lambda (up)
                           (if (seq-contains-p (mapcar (lambda (e) (aref matrix (+ (* (1- (car e)) n) (1- (cdr e))))) (cl-pairlis up (cdr up)))
                                               nil)
                               (nth (/ (length up) 2) (seq-sort (lambda (u1 u2) (aref matrix (+ (* (1- u1) n) (1- u2)))) up))
                             0))
                         updates)))
#+end_src

#+RESULTS: parse-rules-updates-correct
: 123

#+call: parse-rules-updates-correct(input-file("input-5.txt"))

* Day 6

#+name: example-6a
#+begin_example
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
#+end_example

#+name: simulate-guard-route
#+begin_src elisp :var input=example-6a
(cl-defun print-matrix (matrix m &optional (mapfn #'identity))
  "print matrix as chars"
  (s-join "\n" (mapcar 'concat (seq-split (mapcar mapfn matrix) n))))
(let* ((parsed (s-lines (s-trim input)))
       (n (length (car parsed)))
       (m (length parsed))
       (matrix (apply 'vconcat (mapcar 'string-to-vector parsed)))
       (visited (make-vector (length matrix) nil))
       (pos (seq-position matrix (seq-find (lambda (c) (or (= ?^ c)
                                                         (= ?v c)
                                                         (= ?> c)
                                                         (= ?< c)))
                                         matrix)))
       (i (/ pos m))
       (j (% pos n))
       (dir (pcase (aref matrix pos)
              (?^ '(-1 . 0))
              (?v '(1 . 0))
              (?> '(0 . 1))
              (?< '(0 . -1)))))
  (while (and (>= i 0) (< i m)
              (>= j 0) (< j n))
    (aset visited pos t)
    (if (and (>= (+ i (car dir)) 0) (< (+ i (car dir)) m)
             (>= (+ j (cdr dir)) 0) (< (+ j (cdr dir)) n)
             (= (aref matrix (+ (* (+ i (car dir)) n) (+ j (cdr dir)))) ?#))
        (pcase dir
          ('(-1 . 0) (setq dir '(0 . 1)))
          ('(0 . 1) (setq dir '(1 . 0)))
          ('(1 . 0) (setq dir '(0 . -1)))
          ('(0 . -1) (setq dir '(-1 . 0)))))
    (setq i (+ i (car dir)))
    (setq j (+ j (cdr dir)))
    (setq pos (+ (* i n) j)))
  (list pos dir matrix visited)
  (print-matrix visited m (lambda (c) (if c ?X ?.)))
  (seq-count #'identity visited))
#+end_src

#+RESULTS: simulate-guard-route
: 41

#+call: simulate-guard-route(input-file("input-6.txt"))

#+name: simulate-guard-route-add-obstruction
#+begin_src elisp :var input=example-6a
(cl-defun print-matrix (matrix m &optional (mapfn #'identity))
  "print matrix as chars"
  (s-join "\n" (mapcar 'concat (seq-split (mapcar mapfn matrix) n))))
(with-output-to-temp-buffer "*aoc-2024-day6b*"
  (let* ((parsed (s-lines (s-trim input)))
         (n (length (car parsed)))
         (m (length parsed))
         (matrix (apply 'vconcat (mapcar 'string-to-vector parsed)))
         (visited (make-vector (length matrix) nil))
         (stuck-pos (make-hash-table :test 'equal))
         (pos (seq-position matrix (seq-find (lambda (c) (or (= ?^ c)
                                                             (= ?v c)
                                                             (= ?> c)
                                                             (= ?< c)))
                                             matrix)))
         (s-pos pos)
         (i (/ pos m))
         (j (% pos n))
         (dir (pcase (aref matrix pos)
                (?^ '(-1 . 0))
                (?v '(1 . 0))
                (?> '(0 . 1))
                (?< '(0 . -1))))
         (s-dir dir))
    ;; get all visited positions
    (while (and (>= i 0) (< i m)
                (>= j 0) (< j n))
      (aset visited pos t)
      (if (and (>= (+ i (car dir)) 0) (< (+ i (car dir)) m)
               (>= (+ j (cdr dir)) 0) (< (+ j (cdr dir)) n)
               (= (aref matrix (+ (* (+ i (car dir)) n) (+ j (cdr dir)))) ?#))
          (pcase dir
            ('(-1 . 0) (setq dir '(0 . 1)))
            ('(0 . 1) (setq dir '(1 . 0)))
            ('(1 . 0) (setq dir '(0 . -1)))
            ('(0 . -1) (setq dir '(-1 . 0)))))
      (setq i (+ i (car dir)))
      (setq j (+ j (cdr dir)))
      (setq pos (+ (* i n) j)))
    ;; set start pos as not valid for obstruction
    (aset visited s-pos nil)
    (dolist (obs-pos (number-sequence 0 (1- (length visited))))
      (when (aref visited obs-pos)
        ;; reset position
        (setq i (/ s-pos m))
        (setq j (% s-pos n))
        (setq pos s-pos)
        (setq dir s-dir)
        (aset matrix obs-pos ?#)
        (let* ((obstructions (make-vector (length matrix) nil))
               (visited (make-bool-vector (length matrix) nil)))
          (when (catch 'done
                  (while (and (>= i 0) (< i m)
                              (>= j 0) (< j n))
                    (setq pos (+ (* i n) j))
                    (aset visited pos t)
                    (let* ((i-la (+ i (car dir)))
                           (j-la (+ j (cdr dir)))
                           (pos-la (+ (* i-la n) j-la)))
                      (if (and (>= i-la 0) (< i-la m)
                                 (>= j-la 0) (< j-la n)
                                 (= (aref matrix pos-la) ?#))
                          (progn
                            ;; its a loop if we hit the same obstruction
                            ;; with the same direction of movement twice
                            (when (and (aref obstructions pos-la)
                                       (equal (aref obstructions pos-la) dir))
                              (throw 'done t))
                            (aset obstructions pos-la dir)
                            (pcase dir
                              ('(-1 . 0) (setq dir '(0 . 1)))
                              ('(0 . 1) (setq dir '(1 . 0)))
                              ('(1 . 0) (setq dir '(0 . -1)))
                              ('(0 . -1) (setq dir '(-1 . 0)))))
                        (progn
                          (setq i (+ i (car dir)))
                          (setq j (+ j (cdr dir)))))))
                  (throw 'done nil))
            ;;(print! "possible loop %d\n%s\n\n%s\n" pos (print-matrix obstructions n (lambda (c) (if c ?# ?.))) (print-matrix visited n (lambda (c) (if c ?X ?.))))
            (puthash visited t stuck-pos)))
        (aset matrix obs-pos ?.)))
    (hash-table-count stuck-pos)))
#+end_src

#+RESULTS:
: 6

** Note: this is extremely slow but idk
#+call: simulate-guard-route-add-obstruction(input-file("input-6.txt"))
* Day 7

#+name: example-7a
#+begin_example
190: 10 19
3267: 81 40 27
83: 17 5
156: 15 6
7290: 6 8 6 15
161011: 16 10 13
192: 17 8 14
21037: 9 7 18 13
292: 11 6 16 20
#+end_example

#+name: check-equations
#+begin_src elisp :var input=example-7a
(defun parse-equations (l)
  "parse a line that contains an equation into a list
car of the list is the result and cdr is a list of all number pairs in order"
  (let* ((line (s-split ":" l))
         (result (string-to-number (car line)))
         (numbers (mapcar 'string-to-number (s-split " " (s-trim (cadr line))))))
    (cons result numbers)))
(defun cat (a b)
  "concatenates numbers a and b"
  (string-to-number (concat (number-to-string a) (number-to-string b))))
(defun create-combinations (nums)
  "checks if equation is valid"
  (if (= (length nums) 2)
      (list (+ (car nums) (cadr nums))
            (* (car nums) (cadr nums)))
    (apply 'append (mapcar (lambda (r)
                      (cond
                       ((sequencep r) (mapcar (lambda (sr) (list (+ (car nums) sr)
                                                                 (* (car nums) sr)))
                                              r))
                       ((numberp r) (list (+ (car nums) r)
                                          (* (car nums) r)))))
                    (create-combinations (cdr nums))))))
(let* ((equations (mapcar 'parse-equations (s-lines (s-trim input)))))
  (apply #'+ (cl-remove nil (mapcar (lambda (e) (cl-find (car e) (create-combinations (reverse (cdr e))))) equations))))
#+end_src

#+RESULTS: check-equations
: 3749

#+call: check-equations(input-file("input-7.txt"))

#+name: check-equations-concat
#+begin_src elisp :var input=example-7a
(defun parse-equations (l)
  "parse a line that contains an equation into a list
car of the list is the result and cdr is a list of all number pairs in order"
  (let* ((line (s-split ":" l))
         (result (string-to-number (car line)))
         (numbers (mapcar 'string-to-number (s-split " " (s-trim (cadr line))))))
    (cons result numbers)))
(defun cat (a b)
  "concatenates numbers a and b"
  (string-to-number (concat (number-to-string a) (number-to-string b))))
(defun create-combinations (nums)
  "checks if equation is valid"
  (if (= (length nums) 2)
      (list (+ (car nums) (cadr nums))
            (* (car nums) (cadr nums))
            (cat (cadr nums) (car nums)))
    (apply 'append (mapcar (lambda (r)
                      (cond
                       ((sequencep r) (mapcar (lambda (sr) (list (+ (car nums) sr)
                                                                 (* (car nums) sr)
                                                                 (cat sr (car nums))))
                                              r))
                       ((numberp r) (list (+ (car nums) r)
                                          (* (car nums) r)
                                          (cat r (car nums))))))
                    (create-combinations (cdr nums))))))
(let* ((equations (mapcar 'parse-equations (s-lines (s-trim input)))))
  (apply #'+ (cl-remove nil (mapcar (lambda (e) (cl-find (car e) (create-combinations (reverse (cdr e))))) equations))))
#+end_src

#+RESULTS: check-equations-concat
: 11387


#+call: check-equations-concat(input-file("input-7.txt"))

* Day 8

#+name: example-8a
#+begin_example
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
#+end_example

#+name: count-antinodes
#+begin_src elisp :var input=example-8a
(let* ((freqs (make-hash-table))
       (parsed (vconcat (mapcar 'string-to-vector (s-lines (s-trim input)))))
       (m (length parsed))
       (n (length (aref parsed 0)))
       (c ?.)
       (antinodes (make-hash-table :test 'equal)))
  (dotimes (i m)
    (dotimes (j n)
      (setq c (aref (aref parsed i) j))
      (when (not (= c ?.))
        (puthash c (cons (cons i j) (gethash c freqs nil)) freqs))))
  (maphash (lambda (freq positions)
             ;;(message "%s %s" freq positions)
             (mapcar (lambda (p1)
                       (mapcar (lambda (p2)
                                 (unless (equal p1 p2)
                                   ;;(message "%s %s" p1 p2)
                                   (let* ((dif (cons (- (car p1) (car p2))
                                                     (- (cdr p1) (cdr p2))))
                                          (an (cons (+ (car p1) (car dif))
                                                    (+ (cdr p1) (cdr dif)))))
                                     ;;(message "%s %s" dif an)
                                     (when (and (>= (car an) 0)
                                                (< (car an) m)
                                                (>= (cdr an) 0)
                                                (< (cdr an) n))
                                       (puthash an t antinodes)))))
                               positions))
                        positions))
           freqs)
  (let (antinodeslist)
    (maphash (lambda (an _) (push an antinodeslist)) antinodes)
    ;;antinodeslist
    (hash-table-count antinodes)))
#+end_src

#+RESULTS:
: 14

#+call: count-antinodes(input-file("input-8.txt"))


#+name: count-antinodes-harmonics
#+begin_src elisp :var input=example-8a
(defun print-map (map &optional antinodes)
  "prints the map with the antinodes"
  (require 'calc-ext)
  (let ((n (length map))
        (flat-map (apply 'vconcat (mapcar #'identity map))))
    (when antinodes
      (mapcar (lambda (an)
                (when (= (aref flat-map (+ (* (car an) n) (cdr an))) ?.)
                  (aset flat-map (+ (* (car an) n) (cdr an)) ?#)))
              antinodes))
    (s-join "\n" (mapcar 'concat (seq-split flat-map n)))))
(let* ((freqs (make-hash-table))
       (parsed (vconcat (mapcar 'string-to-vector (s-lines (s-trim input)))))
       (m (length parsed))
       (n (length (aref parsed 0)))
       (c ?.)
       (antinodes (make-hash-table :test 'equal)))
  (dotimes (i m)
    (dotimes (j n)
      (setq c (aref (aref parsed i) j))
      (when (not (= c ?.))
        (puthash c (cons (cons i j) (gethash c freqs nil)) freqs))))
  (maphash (lambda (freq positions)
             ;;(message "%s %s" freq positions)
             (mapcar (lambda (p1)
                       (when (> (length positions) 2)
                         (puthash p1 t antinodes))
                       (mapcar (lambda (p2)
                                 (unless (equal p1 p2)
                                   ;;(message "%s %s" p1 p2)
                                   (let* ((dif (cons (- (car p1) (car p2))
                                                     (- (cdr p1) (cdr p2))))
                                          (an (cons (+ (car p1) (car dif))
                                                    (+ (cdr p1) (cdr dif)))))
                                     ;;(message "%s %s" dif an)
                                     (while (and (>= (car an) 0)
                                                 (< (car an) m)
                                                 (>= (cdr an) 0)
                                                 (< (cdr an) n))
                                       (puthash an t antinodes)
                                       (setq an (cons (+ (car an) (car dif))
                                                      (+ (cdr an) (cdr dif))))))))
                               positions))
                        positions))
           freqs)
  (let (antinodeslist)
    (maphash (lambda (an _)
               (push an antinodeslist)
               (message "%s" an))
             antinodes)
    ;;(message "%s" (print-map parsed antinodeslist))
    ;;antinodeslist
    (hash-table-count antinodes)))
#+end_src

#+RESULTS: count-antinodes-harmonics
: 34

#+call: count-antinodes-harmonics(input-file("input-8.txt"))

* Day 9

#+name: example-9a
#+begin_example
2333133121414131402
#+end_example

#+name: compress-and-checksum
#+begin_src elisp :var input=example-9a
(let* ((parsed (vconcat (mapcar (lambda (c) (- c ?0)) (string-to-vector (s-trim input)))))
       (memory (make-vector (apply '+ (mapcar 'identity parsed)) -1))
       (free)
       (occupied)
       (ids (make-hash-table))
       (id 0)
       (k 0))
  (dotimes (i (length parsed))
    (if (= (% i 2) 0)
        (progn
          (setq id (hash-table-count ids))
          (dotimes (j (aref parsed i))
            (aset memory (+ k j) id)
            (push (+ k j) occupied))
          (puthash id t ids))
      (dotimes (j (aref parsed i))
        (push (+ k j) free)))
    (setq k (+ k (aref parsed i))))
  (setq free (reverse free))
  (while-let ((fs (pop free))
              (os (pop occupied))
              (_ (< fs os)))
    (aset memory fs (aref memory os))
    (aset memory os -1))
  (let ((checksum 0)
        (i 0))
    (while-let ((id (aref memory i))
                (_ (> id -1)))
      (setq checksum (+ (* i id) checksum))
      (setq i (1+ i)))
    checksum))
#+end_src

#+RESULTS: compress-and-checksum
: 1928

#+call: compress-and-checksum(input-file("input-9.txt"))

#+name: compress-contiguous-and-checksum
#+begin_src elisp :var input=example-9a
(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.7)
(let* ((parsed (vconcat (mapcar (lambda (c) (- c ?0)) (string-to-vector (s-trim input)))))
       (memory (make-hash-table))
       (free-by-size (make-hash-table))
       (file-ids)
       (free-ids)
       (pos 0)
       (checksum 0)
       (id 0))
  (dotimes (i (length parsed))
    (if-let ((size (aref parsed i))
             (_ (= (% i 2) 0)))
        (progn
          (setq id (length file-ids))
          (puthash id (cons pos size) memory)
          (push id file-ids)
          (setq pos (+ pos size)))
      (progn
        (when (> size 0)
          (setq id (length free-ids))
          (puthash (- id) (cons pos size) memory)
          (push (- id) free-ids)
          (setq pos (+ pos size))))))
  (setq free-ids (vconcat (reverse free-ids)))
  (dolist (id file-ids)
    (when-let* ((file (gethash id memory))
                (file-pos (car file))
                (file-size (cdr file))
                (free-id-pos (cl-position-if (lambda (fid)
                                               (if-let* ((tmp-free (gethash fid memory))
                                                           (tmp-pos (car tmp-free))
                                                           (tmp-size (cdr tmp-free))
                                                           (_ (and (<= file-size tmp-size)
                                                                   (>= file-pos tmp-pos))))
                                                   t
                                                 nil))
                                             free-ids))
                (free-id (aref free-ids free-id-pos))
                (free (gethash free-id memory))
                (free-pos (car free))
                (free-size (cdr free)))
      ;;(message "%d %s %s %d %d" id file free free-id (hash-table-count memory))
      (puthash id (cons free-pos file-size) memory)
      (setq free-size (- free-size file-size))
      (if (> free-size 0)
          (puthash free-id (cons (+ free-pos file-size) free-size) memory)
        (progn
          (cl-delete free-id free-ids)
          (remhash free-id memory)))
      ))

  (setq gc-cons-threshold  16777216; ; back to default
        gc-cons-percentage 0.1)
  (maphash (lambda (id file)
             (when (>= id -1)
               (dotimes (i (cdr file))
                 (setq checksum (+ checksum (* id (+ (car file) i)))))))
           memory)
  checksum)

#+end_src

#+RESULTS: compress-contiguous-and-checksum
: 2858

** This is EXTREMELY slow. I should probably redo it and find a more efficient way
#+call: compress-contiguous-and-checksum(input-file("input-9.txt"))
