#+title: Day2

* Setup
#+name: input-loader
#+begin_src emacs-lisp :var filename=input.txt
(with-temp-buffer
  (insert-file-contents filename)
  (format "%s" (buffer-string)))
#+end_src

* Day 2
Example input:
#+name: example-input-2
#+begin_example
A Y
B X
C Z
#+end_example

Loading the puzzle input from a file:
#+name: input-2
#+call: input-loader("input2.txt") :results none

** Part 1
For this, the solution is easier, as we just need to map all the possible
point combinations (only 9 of them) and then use /pattern-matching/ over the
input rounds, adding them all up.

#+name: strategy-score
#+begin_src emacs-lisp :var input=example-input-2
(apply '+ (mapcar '(lambda (r) (pcase r
                                 ('("A" "X") (+ 1 3))
                                 ('("A" "Y") (+ 2 6))
                                 ('("A" "Z") (+ 3 0))
                                 ('("B" "X") (+ 1 0))
                                 ('("B" "Y") (+ 2 3))
                                 ('("B" "Z") (+ 3 6))
                                 ('("C" "X") (+ 1 6))
                                 ('("C" "Y") (+ 2 0))
                                 ('("C" "Z") (+ 3 3))))
                  (seq-partition (split-string input) 2)))
#+end_src

#+RESULTS: strategy-score
: 15

Overall complexity of the algorithm is ~O(n)~ as we only scan through the
input to get the points for each round, then reduce the list in one go into
its sum.

 #+call: strategy-score(input-2) :cache yes

 #+RESULTS[2bd0538975e0b5a681db88433bbfd8f934c1fde4]:
 : 12156

** Part 2
For this, we just need to change the pattern matching values to reflect the
changes, taking a little effort to figure out beforehand what is the points
for each scenario.

#+name: real-strategy-score
#+begin_src emacs-lisp :var input=example-input-2
(apply '+ (mapcar '(lambda (r) (pcase r
                                 ('("A" "X") (+ 0 3))
                                 ('("A" "Y") (+ 3 1))
                                 ('("A" "Z") (+ 6 2))
                                 ('("B" "X") (+ 0 1))
                                 ('("B" "Y") (+ 3 2))
                                 ('("B" "Z") (+ 6 3))
                                 ('("C" "X") (+ 0 2))
                                 ('("C" "Y") (+ 3 3))
                                 ('("C" "Z") (+ 6 1))))
                  (seq-partition (split-string input) 2)))
#+end_src

#+RESULTS: real-strategy-score
: 12

The complexity does not change from the first part.

#+call: real-strategy-score(input-2) :cache yes

#+RESULTS[95e78cf88b362960b2897bb65206f5e03476c770]:
: 10835
