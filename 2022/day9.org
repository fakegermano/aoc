#+title: Day9

* Setup
#+name: input-loader
#+begin_src emacs-lisp :var filename=input.txt
(with-temp-buffer
  (insert-file-contents filename)
  (format "%s" (buffer-string)))
#+end_src

* Day 9

#+name: example-input-9
#+begin_example
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
#+end_example

#+name: input-9
#+call: input-loader("input9.txt") :results none

** Part 1
#+name: count-unique-visited-positions
#+begin_src emacs-lisp :var input=example-input-9
(defun is-neighbor (p1 p2)
  (let ((i (car p2)) (j (cadr p2)))
    (member p1 (list (list (1- i) (1- j))
                     (list (1- i) j)
                     (list (1- i) (1+ j))
                     (list i (1- j))
                     (list i j)
                     (list i (1+ j))
                     (list (1+ i) (1- j))
                     (list (1+ i) j)
                     (list (1+ i) (1+ j))))))
(let* ((instructions (-map (-partial #'s-split " ")
                          (delete "" (s-split "\n" input))))
       (i 0) (j 0) (head '(0 0)) (tail head) (previous) (visited))
  (-each instructions
    (lambda (el) (--dotimes (string-to-number (cadr el))
                   (progn
                     (set 'previous head)
                     (pcase (car el)
                       (`"R" (set 'j (1+ j)))
                       (`"L" (set 'j (1- j)))
                       (`"U" (set 'i (1+ i)))
                       (`"D" (set 'i (1- i))))
                     (set 'head (list i j))
                     (if (not (is-neighbor tail head))
                         (set 'tail previous))
                     (add-to-list 'visited tail)))))
  (length visited))

#+end_src

#+RESULTS:
: 13

#+call: count-unique-visited-positions(input-9)-

#+RESULTS:
: 5902
