#+title: Readme

* Advent of Code 2022!!

* Setup
#+name: input-loader
#+begin_src emacs-lisp :var filename=input.txt
(with-temp-buffer
  (insert-file-contents filename)
  (format "%s" (buffer-string)))
#+end_src

* Day 1
Example input:
#+name: example-input-1
#+begin_example
1000
2000
3000

4000

5000
6000

7000
8000
9000

10000
#+end_example

Loading the puzzle input from a file:
#+name: input-1
#+call: input-loader("input1.txt")

#+RESULTS: input-1
#+begin_example
7896
4992
1382
2920
7533
2709
6020
5321
2698
6806
8008

1340
1472
7147
2707
5491
7003
2337
1401
5309
4385
2805

6019
1924
8917
6303
9358
3640
1563
1902

10946
10333
8504
6110
10157

4578
1711
3343
6159
4045
3487
3070
5663
3518
5839
5911
4970
4852
4512

4277
3324
6172
8272
2707
3292
6599
1204
7030
3075

6907
5595
10251
8654
4036
11545

16787
11035
12217

2196
1519
5810
6837
1193
6480
1237
1659
4323
2896
3878
2894

15886
20356
23636

8795
7986
14228
15738
13503

6598
17951
17508
2446

1382
3232
6467
2791
6250
2704
3898
5569
8676

2582
8767
3195
7957
6614

24737
34912

28868
34308

2703
20947

5548
5930
6705
4227
6120
8723
4597

5877
1223
5789
2207
3488
5210
3056
4300
3880
1826
5366
4531
2016
5304

4226
5314
6437
1737
1229
3757
5128
1058
5940
3344
5188
4963
1403
5498

4969
3096
7035
2695
4747
5109
6294
7990
1539
2608
2944

14127
9751
4842
1106
2779

11896
6643
15874
10487
4141

4696
6644
6285
4321
4080
6888
5213
5048
6545
5848
1690
5351
2560

17296
4277
8327
7931

8374
3794
5435
6968
4768
3458

5090
5614
9448
10331
1311
12604

5126
4860
1299
6934
11746
2628
12132

6648
8567
10219
2385
3642
10478
7662

9206
2176
6472
12314

7006
9478
2742
12074
11993
3221

2458
4271
6417
13749
5411

7826
4566
10845
4535
5673
8305

8264
11302
7040
9481
9935
6624
8376

10460
20936

3456
3498
6808
7408
5543
3673
6672
6650
7560
2477
6505

6943
3217
6235
5079
1386
3453
1736
4569
1422
2804
5807

2241
1925
3348
4805
2575
3656
1379
5628
2348
4652
5052
5788
4128
2160

4839
3854
3192
4055
1892
5418
6415
1645
1609
3844
3097
2117
4043

6996
16021
23549

5493
5824
7101
5017
8221
5407
1963
6083

4896
18916
17584
19464

2897
1198
1847
4416
3086
2006
1743
1387
3390
1416
4713
3831
2789
5146
2220

9452
8265
6453
2831
3803
1928
1047
5087
9454

2885
1518
5218
2629
5204
3715
4468
4399
3020
5194
5361
4566
5875
3995
3081

5435
3159
1378
1333
4491
5405
4858
3744
5468
2313
3014
2236

7027
5112
6675
1149
5519
7197
5210
3811
1259
3794
2700
6518

6066
2040
1948
2972
3816
1477
4477
3085
4169
1245
5008
2016
4449
1544
1511

5909
3378
12050
6988
11093
8034
2552

5647
7225
1416
4531
2148
5176
1086
1268
3907

8824
12672
6094
4105

9982
1255
5102
2060
8348
8610
9019

6442
8353
2849
6823
5061
8540

1020
4819
2371
6452
2589
2140
3018
6422
2079
1049
4183
1959
6889

3370
20341
6283

3568
8914
2474
1840
1092
2901
4619

5489
5048
2151
1275
4555
6105
6393
5439
1175
3143
1039
6159
4280

25302
11104

16342
19486
6818
5872

4287
7300
5106
6009
5397
4743
8786
5374
7723
3342

7830
4687
3639
5942
8019
7531
4763
8086

2928
12662
1729
15599
7031

4504
8351
3310
2860
7474
1052
7088
7300
7653

3800
3285
2244
6146
1527
2496
3373
2935
4073
2708
5854
4532
4265

38782

3895
2886
3397
10665
7954
5994

3830
4381
4042
3631
2109
2742
2748
1117
2772
1921
4357
2960
4504
6021
2300

5684
30508

5467
4827
7991
4299
4152
7070
1911
1345
5607
6490
5631

2288
4534
1402
2221
2137
4623
5745
1848
1638
2562
1095
2539
4090
3929
4330

3776
11693
1189
2039
2662
11224
9212

3778
1619
4008
1706
1926
3844
5194
3554
6272
2988
4779
5481
1443
6297

1712
6076
7332
5267
6685
2555
4517
8692
1819

23640
10894
25482

10592
9277
1228
1197
9162
4838
3783
2691

15579
16090
5228
4273
5288

4044
10911
4767
8658
5775
9369
5332

8063
4322
5109
6744
5653
9544
2610
2241

3885
1140
10508
11910
6096

7234
15371
10892
15338
12191

3698
3413
3783
3362
1828
1302
3426
3147
5558
2644
3636
5842
5261
3312
3164

3088
1303
2194
5841
5330
5986
4108
4571
7161
6276
5920
5011

6546
30555

5922
2401
4792
7175
7942
5040
3601
2213
6802
2244
6891

2694
7905
6046
3782
5591
3665
4195
4579
4300
1822

6308
2993
5663
4780
6638
6503
6307
4682
7281
4580
7441
5611

9706
4619
2108
8345
2422
12140
9146

4984
10121
4062
3797
5130
1641
11492

7592
9412
5474
7809
8073
2056
3839
3557

7893
3556
9427
2836
10256

4410
3041
2124
5830
4200
4102
5146
3355
4318
5422
4992
1979
2696
5277
4058

13134
35366

5363
1706
4925
5967
8514
3362
1424
4427
8906

2891
4388
10112
3409
2477
1138
3790
4712

9130
4622
9723
4660
2778
1083
2326
9254

3221
4739
3752
1220
10337
1159
2367
1900

2038
5545
5904
5378
4334
2897
5745
3670
4773
3087
5760
4026
3719
3084

8674
8656
4162
5125
4183
3496
7379
6150
5225
8014

10321
16081
6163
2030

31755
18352

1666
15493
8858
15689

1903
7006
9002
5067
9397
8703
7534
8188
4983

4398
12055
6820
2412
10308
11231

5914
9582
4568
7679
5867
5798
2955
7834
1833

2554
1886
4590
3753
3161
4039
2435
1172
2690
4564
5160
3715
2834
6074
1251

9837
4501
3669
7682
2762
6072
8731
2324

7030
6956
3040
2185
4717
2907
5255
1194
1309
5100
5630
5164

18808
5780
13062
16131

5436
13758
12390
14884

5344
3178
1907
6945
6435
3985
3637
6984
2108
2282

6870
3774
4149
3361
3208
3696
4265
2295
7068
4365
6729

9828
3819
7654
2391
11354
6751

5409
6025
6772
4005
6894
2723
2485
5866
5744
1804
2509
3285
5663

6630
7966
6366
2854
3478
6566
3790
4047
8471
5911

5930
4813
10365
1430

13119
11915
4732
9949
13699
9790

3413
3027
5513
3320
4421
2507
5781
2622
5472
6590
2021
2164
4106

49386

3656
7422
6157
5982
3944
5726
2628
6618
6138
2186
4744

33805

9976
4213
4359
3723

4106
1423
3334
5115
3819
1308
2652
5954
4439
2188
3415
1104
2973
1681
4704

64085

1097
4369
3803
3247
5135
6928
3419
2418
5130
2555
3043

4831
2425
2023
1667
6410
6422
5851
4966
6721
5312
3792
6700
1545

1742
5176
8587
9261
15254

3097
6016
5558
3004
4372
1986
5576
6105
1709
1326
4997
5528
2823
3072

1228
2891
3056
5874
2267
2232
1754
3979
1881
6633
1889
5506
4377

3703
6310
1020
4891
4911
2913
3888
4642
1963
3716
2222
4528
1030
6081

10172
1472
6212
9125
9365
7866
3525
4752

2546
2326
5739
1010
4724
5324
2495
2999
5272
1937
4396
6333
3632

2944
1285
3457
1980
2346
5712
5088
3718
2036
6725

4335
5577
4533
3275
4297
2774
5029

1396
5993
4058
1095
4388
1843
1643
6192
2801
2583
4286
5483
2308
1577

1584
7552
8133
9503
1989

4584
7691
4707
5757
2519
2097
1460
6651
3569
1159

9366
3998
2020
2598
2166
3298
6533
1323

10007
2282
10952
3217
8819
7164

3095
1126
1893
1540
3172
2310
2566
2438
4431
3423
6675

4131
9513
11678
5248
7769
3887
3494

5382
1013
4021
7366
12330
13746

3536
4407
1205
6210
1388
6202
5314
3286
6888
3049
3946
3684
4187

1934
1285
3262
4136
5790
1340
2597
2992
3008
5698
3688
3086
2459
2413
4769

2150
1030
3068
3747
5417
4237
3311
5081
4846
5555
4650
3830
2209
3069

9935
9564
15110

3038
2079
1059
4905
4104
3502
6338
1366
5990
6073
4692
4706
3474
3469

5845
1176
5553
4578
3868
6154
4799
5079
5927
4185
1806
4449
6248

1280
2823
1372
5899
2547
5738
1545
1046
2917
4931
6094
3690
5021
4657
1214

3046
4952
1138
2373
1412
4848
5772
4750
4741
5752
5977
5270
5526
3509
1793

3228
9849
11815
6507
10144
4756

5119
1764
1718
4813
3662
4731
2755
1315
1975
5716
4859
4748
4809
1296
1689

2909
7209
6124
3235
4089
1271
6220
10328

5630
10237
5572
1065
2126
7181

32487
2379

2718
4228
7834
6711
7619
6321
1080
8584
6860
6542

5106
8514
6109
1204
5159
7935
7292
8114

5898
4837
6825
4587
1021
5713
4862
3864
2022
1129
4444
6439
4369

8875
7916
2177
2085
8103
7908
6266
9099

23274
30650

5537
21092
21841

5852
9025
4459
4883
2577
4679
5673
1548
6726

4034
2542
15179
6499
3472

2228
5558
7863
5080
6441
2064
1676
8473

18854
5610
18471

1196
3063
13221
19006

37369
24756

4271
6806
6381
6363
5221
5729
3829
7832
1150
3352
3210

1422
2606
6070
4950
4300
4023
1862
5027
5668
5058
3969
2359
5394
6001

12165
13318
11945
12507
11398

9539
8607
7451
11189
11056
3209

5845
2759
4046
3838
2768
1168
1237
6370
3384
3938
3946
5028
2603

20671
8067
7232

7376
3530
3343
4917
6712
5080
5846
2774
3020
5738
5500

5185
2455
6887
7349
1917
2435
2458
3676
1783
8567

5585
3750
2664
6867
1506
6830
1279
7877
2757
4091
2731

11132

6128
2421
5519
4390
6457
2769
1410
3365
5682
5685
1502
3245

1265
7559
8923
1805
9738
3780
9131

3052
5440
1672
3462
1053
2902
2137
5053
4905
3544
4374
2718
5799

24868
18500
13495

4653
5142
2117
2908
2324
4335
1096
6733
2380
5352
1830
1893
2491

3142
4111
4577
6019
1075
2596
4950
5814
5880
5573
3672
2623
5602
1032
5599

7365
2959
6303
6111
4607
6530
4873
4367
3776

16700
7439
4758
6160

4203
1817
2941
5662
1387
1698
3031
3718
6087
4971
5592
4460
5271
3867
4998

22671
4704
23657

5028
5059
4212
1200
2284
6082
4589
4383
4682
1243
6449
1380
4515

10431
11132
13078
3070
8963
1329

3931
6924
5760
2448
4709
13742

4493
4759
5130
5004
7898
8508
6718
2769
5103
4254

2261
4383
1602
3767
4634
3704
4242
6316
5351
3531
3470
3904

3541
2879
1596
4477
1209
2089
4365
4813
1830
1069
2994
6076
3379
4130
4102

11774
16285
15432

1364
3558
5162
4115
2730
3464
2673
4541
5020
5299
3199
3221
4372

2696
2080
4206
1901
6091
4955
2674
2184
4977
4339
1011
3766
5911
5316
3703

21030

6714
3093
1168
1507
5134
6516
1572
8383

5080
7055
6559
4514
7036
7348
5836
2223
1996
4888
3666

25117
18822

2855
4165
4812
8068
6471
4447
4482
4775
1002

5999
5674
4022
7403
5593
6164
5109
6856
3449
1689
3727
2115

5781
4639
3684
4010
4018
1004
3081
1003
1702
1457
1301
2122
2014
5790

6373
1849
4389
5772
4888
7981
4238
1476
5550
2922

1513
8603
5489
6664
4505
7378
4185
8087
6799

6482
3622
5516
6214
6243
6214
4711
3038
3398
5483
3145
3536

9125
5549
8576
5240
6032
7952
5140
7580

6079
2048
4407
5706
2535
4588
5182
3204
5287
5221
2457
6932
4174

5505
1576
13849
5436
2535
3865

2178
5420
1013
6435
3810
2903
5079
4332
6257
1344
4511
3127
6464

3805
2215
1614
2501
1067
1874
6199
1733
2146
6581
3514
1175
1099

6473
3376
4934
5773
4970
7229
5716
1014
7507
6012

3636
3377
5729
2413
6252
3314
2928
2317
1157
2788
3842
3906
4650
5338

5103
2724
3794
1431
5838
3971
2107
6475
1746
5986
3736
6345
4124
5664

3774
2420
1478
2100
2608
1168
1584
1266
1346
1262
6217
6392
2148
4525

3294
14112
2438
13482
4287

10170
4078
4238
3724
8472
9110
5386
3743

10397
11155
4476
7990
8374
3340
4575

27723

7777
9699
8470
1721
7728
1288
4458
3428

12000
5191
8549
9184
3081
11587
9430

13626
2596
12534
7672
5161
1160

7830
3505
7940
4756
6977
3085
2639
6439
4919
1421
5196

2714
1424
7020
8593
1436
7652
1146
4168
2069
5958

38215

1436
6327
10725
4280
4509
10301
5183
5166

6068
8243
6171
5575
9093
6123
2831
5664
6278

4093
4619
2578
5902
1131
3288
4886
4994
6088
6377
1852
4254
1419
1504

7127
8649
2523
8023
3063
2677
1759
8632
7805
2999

3419
1111
5599
1055
3407
4964
3556
7249
1100
7148
1852
1549

5414
11474
1685
8818
10288
6138
1983

23129
2195

3104
1599
2327
3640
2230
2791
2344
1035
1046
3399
5096
1067
1987
5786
1395

32647
10609

6020
2279
8718
3103
7022
6464
6180
3968
3275

3221
5381
6110
1860
4557
4705
3658
4172
5002
5578
1355
4114
3501
4821

1312
1921
2644
5044
3336
4520
1253
3184
3732
6754
2139
#+end_example

** Part 1
For this we can first treat the input. It gets a little tricky because the
input uses an empty line to split things, and ~elisp~ (or at least what I
know about it) does not work well with that, so we replace it with ~:~, then
if you use ~::~ it will split the /elfs/ and then use ~:~ to split their
calories numbers into a list, converting them to numbers. Then we just add
all of them and extract the maximum.

#+name: max-total-calories
#+begin_src emacs-lisp :var input=example-input-1
(seq-max (mapcar (lambda (i)
                   (apply '+ i))
                 (mapcar '(lambda (l)
                            (mapcar 'string-to-number (s-split ":" l)))
                         (s-split "::" (s-replace "\n" ":" input)))))

#+end_src

#+RESULTS: max-total-calories
: 24000

Overall the complexity of this algorithm should be ~O(n)~ as we just scan
the input list a fixed amount of times, given that the calories values are
"small", otherwise the /string-to-number/ conversion can also add one level
of complexity, changing it to ~O(kn)~ where ~k~ is the number of digits in
the calories.

 #+call: max-total-calories(input-1)

 #+RESULTS:
 : 68787

** Part 2
For part two, the logic doesn't change much for parsing and conversion, the
only extra processing we need to do is get the 3 maximum values instead
of just one, we can do that lazily just by sorting the list in descending
order and getting the first 3 values and adding them.

#+name: top3-max-total-calories
#+begin_src emacs-lisp :var input=example-input-1
(apply '+ (subseq (sort (mapcar '(lambda (i) (apply '+ i))
                                (mapcar '(lambda (l)
                                           (mapcar 'string-to-number
                                                   (s-split ":" l)))
                                        (s-split "::" (s-replace "\n" ":" input))))
                        '>)
                  0 3))
#+end_src

#+RESULTS: top3-max-total-calories
: 45000

Overall the complexity here becomes ~O(nlog(n))~ as it performs a merge-sort.
We could reduce the complexity to ~O(n)~ by using something like finding the
maximum, removing it from the list and repeating that 2 other times with
the resulting list.

#+call: top3-max-total-calories(input-1)

#+RESULTS:
: 198041

* Day 2
Example input:
#+name: example-input-2
#+begin_example
A Y
B X
C Z
#+end_example

Loading the puzzle input from a file:
#+name: input-2
#+call: input-loader("input2.txt")

#+RESULTS: input-2
#+begin_example
C Z
C Z
A Y
A X
C Z
C Z
A X
C X
A X
C X
A X
A X
A X
A X
C Y
A X
A X
A Y
C Z
C X
C Z
C Y
B Y
C Y
C X
C X
A Z
C Y
A Z
A Z
B X
A Y
A X
B Y
C X
A X
A X
C Z
C Y
B X
A Y
C Z
C Y
C Z
C Z
A X
C Z
C Y
C X
C Z
A X
C Z
A Y
A X
A X
A X
A X
C X
A X
A X
C X
A X
C Y
C Y
A X
C Z
C Y
A X
C Z
C Y
C Z
C Z
B X
C Z
C X
C X
B Z
A X
A X
C Z
C X
C X
A X
A Y
C X
C Y
A X
C Z
A Z
C Z
A Z
A Z
C X
A X
A X
C Z
C Y
C Z
A X
A X
C X
A X
C X
A X
A Z
A Y
C Y
A Y
C Z
A X
A Y
C X
A Z
C Y
C Z
C Z
A Y
C Z
A Z
C Z
A Z
A Z
A X
C X
A Y
A X
C Z
A X
C Z
C Z
A X
C Z
C X
A Z
A X
A Z
A X
C Z
A X
C X
A X
A X
C X
C Z
C Y
C Z
A Y
C Z
C Z
A X
C X
B X
C X
A X
C Y
C Z
C Z
C Z
A Z
C Y
A X
C X
B X
B X
C Y
C X
A X
C X
C X
A Y
C Z
A X
A X
A X
C Z
A X
C Z
C Y
C Z
C X
A X
C Z
A X
C Z
C X
C X
A X
C Z
C Z
C X
A Y
B X
B Z
A Z
C Z
A X
A X
A X
C X
C X
C Y
C Z
A Y
B Z
A X
C X
C X
C X
C Y
C X
A X
A X
A Z
A X
A X
C Z
C Z
C Z
A X
C X
C X
C Y
A X
C Z
A Z
C X
A X
C X
C Z
A X
A X
C Z
C X
C Y
A X
C Y
C Z
A Z
C X
A X
A X
A X
A Z
C X
C X
A X
A X
B X
C Y
C X
C Z
C Y
A X
C X
C Z
C Y
C Y
C X
C Y
B X
C X
C Y
A X
C Z
C Y
A X
A X
C X
A X
A X
A Z
C X
A Z
C X
C X
C X
C Y
A Z
C Z
A X
B X
C X
A X
A Z
C X
C Z
B X
C X
A X
A Y
A Z
C Z
C Z
C X
A Z
C Z
C Z
C X
C Y
C Z
C Z
C X
A Z
C Z
C X
A X
A X
A X
A Z
A Z
C Z
A X
C X
A X
C X
C Z
C X
C X
A X
C X
B Y
A X
B X
A X
C X
C Z
A X
C X
A X
A X
C Z
C X
C X
C X
C Z
A X
B X
A Z
C X
B Z
C Z
B Z
C Z
A Y
A X
B Y
A X
A X
C Z
C X
A X
B X
C X
B Z
C Z
A X
A X
A X
A X
A X
A X
A X
C Y
A Y
C X
C Z
C X
C Y
C Z
C X
A X
C Z
A X
A Z
C X
C Z
C Y
A X
C X
C Z
A X
A Y
C X
A X
C Y
A Y
C Y
A Z
C Z
A X
C Z
C Z
A X
C Z
A Z
C X
C Z
B X
C X
A X
A Y
A X
C Z
A Y
A Y
C X
B Z
C X
A X
A X
A X
A X
A X
C X
C Z
A Z
A X
C Y
C Z
A X
A Z
B Z
A Z
A X
C Y
C X
C X
C X
B Z
A X
C Y
A X
A X
A X
C Y
A X
B X
C X
C X
C Z
C Z
A X
C Y
A Z
A X
C X
A X
C X
C X
C Z
A X
C Y
C Y
A X
A Z
A Z
A X
C X
A X
C Y
B X
A X
C Y
C X
B X
C Z
A X
A X
C X
C Z
C Z
C X
C Y
C Y
A X
C Z
C X
C Y
C X
A X
A X
A X
B Y
C X
A X
C X
C X
A X
C Z
C Z
C X
B X
A Y
A Y
C Z
C Y
C X
C Y
B Y
A Z
C X
A X
A Z
A Y
C X
A Z
C Z
C Y
C Z
A X
C X
C Z
C X
C X
A X
C Z
A Z
C X
C Y
C X
A X
A Z
C Z
C X
A Z
B Z
C Y
B X
A Y
B X
B Y
A Y
A X
A Z
C X
C X
A X
C X
C Z
C Y
A Z
A X
C Z
A X
A X
A Z
A X
A X
C Z
A X
C X
A X
A X
A Y
C Z
A X
C Z
A Z
A X
A X
A Y
C Z
A Z
A Z
A X
C X
A X
A X
C Z
C X
C X
C X
C Y
C X
A X
B X
B X
C Z
C Z
C Z
C X
B Y
A Y
B X
B X
C X
C X
C X
A X
C Y
A Z
A X
C X
A X
A X
A X
B X
C Y
A X
C Z
A X
C X
A X
C Z
C X
A X
A Z
A X
A X
A X
C Z
A Y
B X
A X
B X
C Z
A X
A X
C Y
C Z
C Z
A X
C X
A X
A X
A X
A X
A X
C X
A X
C Y
C X
B X
A X
C Y
C Z
A X
A X
C X
A Z
A X
A Z
A X
C Z
A X
B X
C X
A X
C X
A X
C Y
C Z
A X
C Z
C Z
C X
B X
C Z
A X
A Z
C X
A X
C X
C Z
C Z
C Y
C Z
A X
C X
C Z
A Z
C Z
A Z
C X
C Z
A X
A X
B X
A Z
B X
C Y
C Z
C X
A X
C Z
C Z
C Z
B X
C X
C X
A Z
A X
C Y
A X
B Z
B X
A X
C Y
B X
C Z
C Y
C Z
A X
C Y
A X
A X
A Z
A X
A X
C X
C Y
C Z
C Z
C Y
B Y
C Z
A X
A X
C X
C X
C X
A X
C Y
A X
A Y
A X
C X
C Y
C Y
B X
A X
C Z
A X
C Z
C X
A X
A Z
C X
C Y
A X
A Z
A Z
C Y
A X
C Z
C Z
A X
A Z
B X
A X
C Y
C X
B Z
C Z
A X
C Y
A X
C Y
A Z
A X
C X
C Y
B X
A X
B X
A X
A X
B Y
A X
A X
C X
A X
C X
A X
A X
C Y
A X
C Z
C Z
A Z
C X
A Z
C Y
C Z
C X
A X
C Z
A X
C Y
A X
A Z
C Y
C X
C X
C Z
B X
A X
A X
A Z
C Z
C X
A X
C X
A Z
A Z
A X
C X
C Z
B Z
C X
C X
A X
A X
A X
C Y
C X
A X
C Z
A X
B Y
A X
A X
C X
B X
A X
C X
B Y
A Z
C X
C X
A X
A X
A X
C Y
C X
A Z
C X
A X
C Z
C Z
C Y
A X
A X
B Z
C Y
C Z
A X
C Z
A X
C Z
B X
A Z
A Z
C X
A X
C Z
C X
A X
A X
C X
C Z
C X
A X
C X
A X
A X
C Z
C X
A X
A X
A X
A X
C Y
A X
C X
C Z
C Y
C Z
C X
C Z
A X
C X
C Z
C Z
C Z
B X
C X
A Z
A Z
A X
C X
C Z
B Z
C Z
C Z
A Y
A Y
C X
A X
A X
A Z
A X
A Y
A Z
A X
A X
C Z
C Z
A Y
A X
B X
A X
A X
C X
A X
A Z
C Z
C X
C Z
C X
A Z
B X
A X
A X
C X
B Y
A X
C Z
A X
A Y
A Z
A X
C Z
A Z
B X
C Z
C Y
A X
C Y
A X
C X
C X
C X
A X
C X
C Z
C Y
A Z
C X
C Y
A X
A X
C Z
A X
C X
C X
A X
A X
A Z
C X
C Z
A Z
A Z
A X
B X
B X
A X
C Z
A Z
C Z
C X
C Z
B X
C X
C X
B Z
A X
A Z
B Z
B Z
C X
A Z
A X
A Y
C X
A X
C Z
A X
C X
A X
C Z
C X
C X
C X
C Z
B Z
A X
A X
A X
C Z
A X
A X
C X
B Z
C X
C X
A X
B Y
C X
C X
C X
A X
C X
A Z
C Y
B Z
A X
C Z
C Z
C Z
C Z
A Y
C Z
A X
A X
C X
C X
A X
C X
A Z
A X
C Z
C X
A X
C Z
C X
C Z
B Z
A X
C Y
C Z
A X
A X
C Y
A Z
C X
C Z
C Z
C Y
C Z
A X
C X
A X
A X
C X
A X
C Z
A X
A Z
A X
C Z
C Z
B X
C Z
A Y
A Z
A X
C Y
C X
C Y
A X
A Z
A X
A X
A X
C X
B X
C X
A Y
A Y
C Z
A X
A X
A Z
C X
A X
A Z
C Z
C Z
C X
C X
A X
A X
C Z
A X
C Z
C Z
B Z
A X
A X
C Z
A X
C Z
C Y
C X
A X
A Z
A X
A X
A X
C Y
C Z
A X
C Y
C Z
C Z
A X
A Z
A X
C Z
C Y
C Z
C Y
A X
C X
A X
A X
A X
C X
A X
A X
C Y
C X
A X
C X
A Z
A X
C Z
C X
B Z
C Z
A X
C Y
C Z
C X
A X
A X
B Y
A X
B X
C X
A X
A X
C X
C Y
A X
A X
A X
C X
C Z
A X
B X
C Y
C Y
A X
C Y
C X
A X
C X
A X
A X
A X
C X
C X
B Z
A X
C X
A X
C Z
A X
C Y
A X
C Z
C Z
C Y
A X
A Z
A X
C X
C Z
A X
C Z
C X
C Z
A X
C Y
A X
C Z
C Y
C X
A X
A Y
B X
A X
A Y
A X
A X
A X
A X
C Z
C Y
B X
A X
C X
A X
C X
A X
A Y
A X
C Z
A Z
C X
A X
A X
A X
C Z
C Z
C Y
C X
A X
C X
C Y
A Z
C X
A X
C Y
C Z
C Z
A X
A X
C Z
C Z
C X
C X
C X
C Z
C Y
C X
B Z
C Z
A X
C Z
A X
A X
C X
C X
C Y
A Y
A X
C X
A X
C X
C X
A X
A X
A Y
C Z
C Y
A X
A X
A X
A X
C X
C Y
A X
A Y
A X
A X
C X
A Z
C Z
C Z
C Z
C Z
A X
C Z
C X
C X
B X
C X
C Z
C X
A Z
C Z
B X
B Z
C Y
A X
B X
A X
A X
A X
C X
C X
A X
C Y
A X
C Y
B Y
C Y
A X
C X
C Y
C Z
C X
A X
A X
C X
B X
C Z
C X
A X
A Z
A X
C Z
C X
B X
A Z
A X
B Z
C Z
A X
C Y
A X
C Z
B X
C X
C X
C Y
A X
A X
A X
C Z
C X
B Z
C Z
B X
B Z
A X
A Z
A X
C X
C X
C Z
C X
C X
B Y
A X
A X
A X
A X
A X
A X
C X
A Z
A Z
C X
C X
A X
B Y
C X
C X
A Z
A X
B X
A X
C X
C Z
C Y
C Z
C Z
B X
C Y
C X
A X
A X
C X
C Y
C Z
A X
C X
A X
B Z
A X
C Y
C X
C X
A X
C Z
C Z
A X
C X
C X
C X
A X
A Z
C X
A X
C Z
A X
C Z
C Z
A X
C Z
A Z
C X
A X
A X
C Z
A X
A X
A X
C X
A X
A X
C Z
C X
C Y
B X
C X
C Y
C X
A X
A Y
A X
A X
A Z
C Z
A X
C X
C X
C X
C X
B Z
A X
B Y
C X
C X
C Y
C X
C Z
C Z
A X
C X
A X
C X
A Z
C Y
B X
A X
C X
C Z
C Y
B X
C Y
A X
C X
A X
A X
A Z
A X
B X
C X
A X
A Y
A X
C X
C Z
A Z
A X
A X
C Z
A X
C X
A X
C X
A X
C Z
C Y
A X
C X
A X
C Z
A Y
B X
C Z
C Z
A X
A X
A Y
A Z
A X
C X
C Y
C Z
A X
C Z
C Z
B X
A X
A X
A X
C Y
A Z
C Z
C Z
A Z
A X
A X
B X
C X
B X
A X
C Z
A Y
C Z
A X
C X
C Z
C X
A X
C X
A X
A X
C Z
A Z
C X
C X
B Z
C Z
A Y
A X
C X
C Z
A X
C Z
C X
C Y
C X
A Y
C Z
C Z
A X
A X
A X
C Z
C Y
C Z
A X
C Z
A X
C X
A X
A Y
A X
A Z
A X
A Y
A X
A X
A X
A Z
A X
C Z
C Z
C Z
C X
A X
A Z
C X
C Z
A X
C X
C Y
A X
C X
A X
C Y
A X
A X
C Z
C X
A X
C Z
A X
A X
C Z
C X
C Z
C Y
A Y
C Z
C X
B X
A X
A X
A Z
A X
A X
C X
C Z
A X
C X
A Z
B X
A Z
C Z
C Z
A X
B X
A X
A Y
A X
A X
C Z
A X
C Y
C Z
C Y
A X
A X
A X
A X
B Z
B Z
A X
C X
C X
A X
C X
C Y
B X
C Y
B X
A X
B Z
C Z
A X
A X
C X
A Z
A X
C X
C Z
A X
C X
C X
C X
C Z
C Y
A X
A X
A X
C Z
C Z
C X
C Z
B X
A X
C Z
C Z
C Y
A X
A X
C Z
A Z
C X
C Z
C Y
C Z
C Z
A X
C Z
C Y
C X
B X
C Z
A Y
C Z
C X
C X
A X
A X
A X
C Z
B Z
A X
A Z
B X
A Z
A Z
C Z
C Z
C X
C Y
C Y
C Z
A Z
C Y
C X
C Y
A Z
B Y
A X
C Y
A X
A X
A Z
C Z
C Z
C Z
C X
C X
C Z
C Z
A X
C X
A Y
A Y
A X
B Z
A X
C X
A X
C X
A X
A X
A X
C X
C Y
C Z
C Z
A X
C Z
A X
C X
C X
C Z
A X
A X
A X
C X
C Z
A X
A X
A X
A X
C Z
B Y
A X
A X
A X
C Y
A X
A X
A Z
C X
A Z
C Z
A Z
C Z
A X
A Z
A X
A X
A X
A X
A Y
C X
C Z
A X
A Z
C X
A Y
C Z
C Y
A X
B X
A Y
C X
A X
C Z
C X
A X
C Z
C X
A X
C X
C X
C Z
A X
A Y
C Y
C Y
A X
A X
A X
A X
A X
C X
A Y
C Z
C Z
C Y
A X
C Z
C Z
A X
C X
C X
C Y
A X
A X
C X
C X
A Z
A X
C Z
A X
C Z
A X
B X
A Z
B X
C Z
C Z
C X
A X
A Z
C X
A X
A X
C X
C Y
C Z
C X
C X
A X
C Z
C Z
C X
B X
C Z
A X
B X
A Z
C X
A Z
A X
A X
C X
A X
C Z
A X
A X
C Z
C Z
C Z
A X
C X
A Y
C Y
A X
A X
A X
A X
C X
C Z
A X
A X
A X
C X
C Z
A X
C Z
A X
A Y
C Y
C X
C X
A X
A X
A X
A Z
A X
C Z
A X
C Y
B Z
B X
A X
C X
C Z
A X
A X
C Z
B X
B X
C X
C Y
C X
B X
A X
A X
C X
A Z
A X
C X
C X
C X
A X
C Z
A Y
A X
C Y
A X
A X
C Z
A Z
A Z
C X
C X
C Y
C Y
C X
C X
C Z
A X
C X
A X
A X
A X
A X
C Y
C Z
A X
C Z
C X
C X
A X
A X
A Z
C Y
C X
A X
C X
A X
A Z
A X
A Z
A X
A X
A X
C X
A Z
A X
C X
C Y
A Z
A X
B X
C X
C Y
C Z
C X
C Y
C X
C X
A X
C Y
B X
A Z
C Z
B Z
C X
A X
C Z
A X
C X
A X
A X
A X
C Z
C Y
B Z
A X
C X
A Y
C Z
A X
A X
A Z
A Z
A Y
C X
C Z
C X
A Z
C X
C Z
C X
B X
A X
C Z
A X
A X
C Z
A Z
C X
C Y
C X
C X
C Y
A X
A X
C X
A Z
C X
C Z
C X
A Z
A X
A Y
A X
A X
B Z
C Z
C Z
A Y
C X
A X
B X
A X
A Z
C Y
C Z
C X
C Z
C Z
C X
C X
A X
C X
A Z
C Z
C Z
C Z
C Y
C X
A X
C Z
A Z
C Z
C Z
A X
C X
A X
C Z
A X
B X
A X
C Z
C X
C X
A X
C Y
A X
C Z
B X
C Z
C X
A X
C X
C X
C Z
A X
A X
C Z
C Z
C X
C Z
C X
A X
A X
C Z
C X
C X
A X
C Z
A Z
C Z
B X
C X
C Y
C X
C Z
A X
B X
C Z
A X
C Z
A Z
C Z
C X
A X
C Z
C Z
A X
A X
C Z
A X
C Y
A Z
C X
C Z
A X
B Z
B X
A X
A Z
A X
A Z
A X
A X
C Y
A X
C Y
C X
C Y
C Y
C X
A X
A Z
A Z
C X
C Z
B X
A X
C Z
A Z
C X
C Z
C Y
A X
A X
C Z
C Z
C Y
A Z
C Z
C Y
A X
C X
A X
C X
C Z
A Z
B Z
A X
A X
A X
C X
C X
A Y
A Z
C X
C Z
A X
B X
A X
A X
C X
C X
B X
A X
B X
C Z
A Z
C Z
A X
C X
C Z
C Y
A Y
A Z
C Y
C Z
A X
A X
C X
A X
C Z
C Y
A X
C Z
A X
A X
B X
A X
A Z
C X
C Y
A Z
C Z
A X
A Z
C X
C Z
C X
C Z
A X
A X
A X
C X
A X
C Z
C X
C X
C X
C X
A X
C X
B Y
A Z
A Z
C Z
C X
A Y
C X
A X
C X
C Z
B Z
C Z
B X
A X
A Z
A X
C X
A X
C Z
C Z
C Z
A X
C Z
A X
C Z
C X
C X
C X
B X
A X
A X
B X
C X
A X
C Z
A Z
C Y
C Z
A Z
B Z
A Z
C Z
C Z
C X
A X
A X
C X
C X
C Y
A Y
A Z
A X
C Z
C Z
C Y
C X
A X
A X
C Y
A Z
C X
C X
C X
A X
C X
C X
A Z
C X
C Y
A Z
C Z
C Y
A Z
C Z
A X
C X
C Y
C X
C X
C Z
C X
C X
C Z
C X
A X
B Y
A X
C X
B Z
C Z
C X
C Z
C Z
A Y
A Y
A X
A Z
C Z
A X
C X
C Z
A Z
A X
A X
A X
B X
A X
B Z
C X
A X
C X
A Z
C X
A X
C Y
A X
C X
C Y
A Z
C Z
C Z
B X
A X
C X
A X
C X
C Y
A X
C Y
A X
B X
C Y
A X
A X
C X
A X
B Y
C Y
C Y
C Y
C X
A Y
C X
C Z
A X
A Z
A X
A X
C Z
A Z
A Z
C X
A X
A X
B X
C X
C Y
C X
B Z
A X
C X
C Y
C X
C Z
C Y
A X
C X
A X
A X
A Y
C Z
C Z
C Z
A X
A X
A Z
A X
A X
A Z
A X
C Y
C Y
A X
A X
A Z
C X
A X
C Z
A Z
C Z
C Y
C Z
A X
C Z
C X
C Z
A X
C Y
C Y
B X
A X
A Z
C X
A X
A X
C Z
A X
C X
C Z
A Z
A Y
A Y
A X
C X
A Y
A X
A X
B Z
A X
C X
C X
C X
A X
C X
C Z
C Z
A Z
C X
C X
C Y
A X
C X
A X
A X
C Y
C X
A X
C Y
C X
C X
A Y
C Z
C X
C X
C Y
C Z
A Y
A X
C Z
C Z
C Z
C X
C Z
A X
A X
A Z
A X
C Y
C X
C Z
A X
A X
C Z
A X
C X
A X
A Y
C X
#+end_example

** Part 1
For this, the solution is easier, as we just need to map all the possible
point combinations (only 9 of them) and then use /pattern-matching/ over the
input rounds, adding them all up.

#+name: strategy-score
#+begin_src emacs-lisp :var input=example-input-2
(apply '+ (mapcar '(lambda (r) (pcase r
                                 ('("A" "X") (+ 1 3))
                                 ('("A" "Y") (+ 2 6))
                                 ('("A" "Z") (+ 3 0))
                                 ('("B" "X") (+ 1 0))
                                 ('("B" "Y") (+ 2 3))
                                 ('("B" "Z") (+ 3 6))
                                 ('("C" "X") (+ 1 6))
                                 ('("C" "Y") (+ 2 0))
                                 ('("C" "Z") (+ 3 3))))
                  (seq-partition (split-string input) 2)))
#+end_src

#+RESULTS: strategy-score
: 15

Overall complexity of the algorithm is ~O(n)~ as we only scan through the
input to get the points for each round, then reduce the list in one go into
its sum.

 #+call: strategy-score(input-2)

 #+RESULTS:
 : 12156

** Part 2
For this, we just need to change the pattern matching values to reflect the
changes, taking a little effort to figure out beforehand what is the points
for each scenario.

#+name: real-strategy-score
#+begin_src emacs-lisp :var input=example-input-2
(apply '+ (mapcar '(lambda (r) (pcase r
                                 ('("A" "X") (+ 0 3))
                                 ('("A" "Y") (+ 3 1))
                                 ('("A" "Z") (+ 6 2))
                                 ('("B" "X") (+ 0 1))
                                 ('("B" "Y") (+ 3 2))
                                 ('("B" "Z") (+ 6 3))
                                 ('("C" "X") (+ 0 2))
                                 ('("C" "Y") (+ 3 3))
                                 ('("C" "Z") (+ 6 1))))
                  (seq-partition (split-string input) 2)))
#+end_src

#+RESULTS: real-strategy-score
: 12

The complexity does not change from the first part.

#+call: real-strategy-score(input-2)

#+RESULTS:
: 10835

* Day 3
Example input:
#+name: example-input-3
#+begin_example
vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
#+end_example


Loading the puzzle input from a file:
#+name: input-3
#+call: input-loader("input3.txt")


#+RESULTS: input-3
#+begin_example
LHLRlCCvCLVgHPfCHtVjBGrBDNzWFBsBGBfscGsD
nQwbnwwpbrJBrNWB
hmnSdSdQpTpdnlPdvddPNglLjH
RZhwpDsNqVmQClwl
TLJfLTPqcvTrvvLMLMlVzzvVVQQtmQCmtzmV
MJjccdfTMcbqjNSRSZsSDZ
LLrNNqCTCwLTttwcNctqFGmRBSBjzjbSzbBbjNbzjB
GnhhZQPDGdldgQmQSjpzjzQssb
gDJZPMnPnhlhJWhZntLCLcTqVMLrGVtMfM
rrBgDBGnVnffDnfQQqngJhhSRQvhhCRRRSZbRpRzwQ
NtLmcHPHMHHssFJphZpbhwpNRbbC
LJPHlmdJDgrrqrnl
nJhrcNnfrFwNhPdMQSgZSCMjQn
LjqGWsGWllRRlHVsqGGWsZZSSHQgPmHZZSPvdPCmvQ
zqqVTWjqBsTJprNbppFb
zSMgWzlgFSWFcGZlCZGlrrTc
spnQHdQmHddNmpWrpWcChccTWc
BsRsnmBQdNWsvRPzbzbLzDVSPSbVLM
lDfbffptlrJZTBJHjjBWjT
LcwwgQLgzvztwtMQGCMVCHWmnmjWnGhFHnZjmZhjhT
sCqtzsswCgccbSqrDSqbNNfN
snnnjwRRwGSSnVmhhVMhGFbgQgbzFFPPgQQmPbbgQd
qCrccvcDDcvqDZlCcrcfQNQFdsbgWzFfQddQQPgQ
ZcrvrBqBTCZnBBswjwpSRs
qSczBfBcjMZMfctsmsGmFJsmQQcQCr
wPhTLNVNGLNdGHPHwlQsnrnmnrQvHFFHQn
dLdwbNLRdgGbgTjZfDbqDWjftSzW
rZwlrtRtNtlHqVBtdqQgdq
fbwzpPwbhJzpwfTSHgdgqcJVcBjHvHdJ
LLPbhzPpTTbTshfGhPwSFWnNmMrrZZmNmZDmWNCCZs
tMHgMWMQWgFJTHsWMvJrVdlmvlSvdvlpvG
RNfZZfRttBtdlZlmmmplSS
DzzNDDRwnwwbLnMFtsMntQFM
qHqBMNqgMwHMbnGStHSbndnt
PwWZPjpfsDsDsPfPfjdbSvbWhdFSbFGSWFtr
wfpjpJcfVsspzZRRszDpwcRggLTQQBLqNqcqcggLCgNmlq
TmmFjtvFdDGjdFFJjFRDLNLHGBVcqgLcLgVBLqgV
WbWSPSwQCWrWQSrCbwNVlLlBZLBvLlvZVqPl
SfwbhrwQQbbMwCwWCrbwJRvptJfjDTDRvzTttRjp
jzqSMszqsbVVMVMgWhWCgMrpGgpB
wrwLcFQmPlFFlwLZmFGTfPvWGfPvhWWWvGgf
wRZtHFHmzNDHSqrs
NprlCgrrnrNCjplSCtljpFrFZLzzgwmVgBzBZZPwzBPQBwVL
HsDMvHTDfsfQZfZzmPWL
JcPsDGTqcTqSdrSCtnCt
cFcmfmJFtFmtlTNtLlCWTT
QPQzjRRsVsQqBqwlTlNBpLNSWDpN
QblgzRPgbgQsVvgPVQhgQqjvMnJfccnZddcGGfrFJMFGGF
PWbWmFFnPFPWbDVVmmDHDFGdGhTQdLdnTZQZZcGSGGdQ
ClzjNBlBJvlsBdcPLZdLPQjLQZ
vJMBpBzzzfNCCzCffJlzgMWDWwPDtVtmVHPMwVHD
bJjWzWFlTMjjSNBrRcBrZR
mwnwqPwnGQPCqmJmPQJPCVNcRZBRRrrNrmrcVpSrRf
PGvQQGPqvhWFWlJbDv
PNPrdmPGRJlZCrCJlGQzjRFLpFRppjgppgcj
DwfVnssbVnSWShDwsnnhBLFjFgjFBzDBjHDLpHDj
vSsMgbsTfTwwfMffnTvgNNCmrPJtCNrJrCrrtvGm
cRnRplCzccVcrwcnppVVzRCNhfhgChNJfPgHJdHDNtNCtP
WFmbLMZdLBqfJNbPTfttDD
BdMWdQsGsSsrpzrswr
llhhZzSLqlzwRrffzwzT
GvBbNjHbjjTGGHHFcsFvfRrtJQPvtRfwwfrPJD
HGbcbTTjHFNpppmLnSdplWqZ
FhwFbPwsvtRgVCgvMT
HJVHdHBWdBQSSSQnqSQLqZHtcCctppgBtRrgtMCgTprRMM
QNzZLVSLLLDGPPzPmbFs
VdTHmWCVZDTPBBWBQBFQQg
MzjMjzCjJsbJhhPz
crfGGLwwLGrtrvCtdTmdDH
wRLvLmGQLwFPBRmnLCLmGQTzNNqVNZMMVzzQbzVbNZpMVb
jsgJWjdHghsglHtWsjSfHzVNqzfpCCzqDpzDrVVrrD
jJtWWsWhtSHsSSgchthHcjHCvcFCRvwvvTTFBGvBmmGLnL
LpjWLNqWpwRWMqLRGjwJlStgbtrVgHFrGllDDrVH
SQmmTcZZvSZBTmTSzhPTddbVDhHllgFCDHtrDHgDVVDr
PzTTvznBncnfTmTTQcPdmzzMqWNfqwRLpWJsNfwLJjsSwJ
lsGdGwBsflGrfsHvHwQLdFrmPhDhCFhhjWCVmhDzmbmPhC
qtMSNNZZMpcnVzmVbCqjWjzB
ZZcgRJpBtTMNnntncwgQQdfGHHHlsQffLH
jBBtjjqfnwStBSrVVFwSVVvvWzHmcWvWbvPmPbWrbMRM
GTdNDlpJhlCvPbHgcDmgDH
JZQdQhNldLdTpGdJGdNCpLZdSBnnBFfHHswqqjffZsqsFjns
phJhDPQLDSJvpHhvDJhfrFQVRrnsslrgwrVrrRjg
mWNWqZWWZBMdCGMNCdWmWCNCsnVFTRsVnZFlsrlFwFgVsgjr
dWdjttGmNCBchJfhHvhPtvJt
CSFSFdfCzJhtSCHQFjQHQWFHRNHG
wnbrgZnwZgDLsLbwsLrsrNWQNjPZHHvPPQHNqHHvqB
LbmTLDsgggQmzmCCppdtSJtM
SzSSchCdZgHbwHSZ
GsMMmslnsfmNGNNNVVtZWdwbqQbpgWjjgWZjQm
DvlMtflGGVGthhzdvLvhrTcc
dvfVNqHlQfGRcjDczlCDnC
PsPsStLprtTTFSTLmhSVSFSsCzRRjzDnMJDCMWWDjMnMnpjW
hBFPhSBFttBhStLwmsPTtPsFHZNGfQgdgdZbdqZwdgNVvwvH
rhjcChdgjdCrjLjLLSLmLFMmFtNnnbQNNNPMbbmtQF
lwWRZDlsWzrbbQpN
rTRqsqDRRRsDRVrqDgBCdCVShjCBHchjdh
PsspltlPsmTsmbmfTPSTTCGjhJJjCnpqJJNhhJwNJh
BdrLVvgQLQVLHRZGnqRhRNdwNC
WrFVHDgDQFHVLVVDFQMLltmPsssPztwsPTzsWcmc
CBvvSzFGSGGWfFZpcHqjvjcvcqccJq
bRQwgbbhrRhdwmQbWtdjnJHqVJccJqgHVJHJcl
RRmbPrNRRPLLtmbQmbNwddCTSTzBSDBDSMFTBSSPZFFW
cppsSgNrSgwrGRdHRrwd
LzqqmCLCLWQvCzmzZwHnZZHSwvwnlDlS
hzFqFLLLFtSNVsFF
zpZcZZZdppzDLWDtJGgfGbTGGJTGcc
qhvNSClCShRrRBBWTQfgBFbgtfgg
HlHqvjqmCvCvlSSHvVdsVDzjpVjMWdwLpP
qLdsfNsTHQwnSNSBNS
gFhWzrhfbmlpmZhJWrFSvRMnwwvvpBpBSpQBMv
rgWZrbmlmbzFfglgWzGggFJLccVPqLPqtPLGcPsPHcPLTd
jTTWRCCbwJJNTHrffqNnzh
DZVmDpgGBVdcMZnqfhlNHQMlNNhl
sDcpsDZBcmgdssZcnmSWCPWRSRwJWwvFLvRwWj
hWwhgQlQQgjPhFChZVdbcJ
zHsrMPNMtDDTmbcJbccmDb
znzPzrtHtHtMzqHHrsSSLwljqfgwGggjlQjQQgQBGj
JpnRtqlJsqDJJBBNNmQmgdmRNGGmvv
hTCbTwMCwVhTWdmDgDvjWD
MDhhMSwZCbbLVhbLcDSwCwZtZznlzlnqBPBpHPPlBlHJ
CtvnvqNNDchrhFVpwftmgQgpQfwS
MbdqPWGjBjMBbwlfVgdmfSfJJS
jWzbzjWWjWMMbRbMsjzBhChrNHcNqHcrNnhssnsc
LlLJSWgWllSShRmRlBLJSVBzpTHzTTJcpTHzpTTcPpGpTr
MfMqnvbvDfbFFZDfFNjsGrRppHpZGGcGrcPprz
wfNFvtwMvbnntftjfNtVmlgmStBmlBWdQQRg
GpFRRPGWqzHwdqpzqbjjgfZptBBVMSjSfBZc
TClllrnsJvDMBgcjfmtssB
NlhNNchrNJlLvClNDrzbGRqwqqqwqPPFLGdd
qFmVtvmmVvzzFtzzGzzMNNMSSTjNJlStjSfNgf
sWrPBCnCTMsTJfSM
QTLbpnRpRppnRQdRzRZqGzFFVVRz
WGGPjFvMVNjlcQJr
bslfldbgtpSmwmSNHQhLJhcwLcQrQV
gTltCsSsssPFnDzWPTMz
hhRRhQgGrHjhRsrgqznbzncZjVVJVjncjd
DSFfNTBFSDmMSTDlFbBBdccCdJJZCbZCbW
DDLmdSmTvQQgsgvGHH
dNqNgNvFnvdZHFWnZWNBTQlPTppPGlCTpBQppq
LJrtLrsLjsGvTCTpQP
mtLhjVjMhhmVMvtJmLfhFWHnngbRRdZHngnZWZ
NzdVNzqqCtCHMMZBCGBW
psjllRjFpjpbjspFmWmWnLBmMMQMmHbm
DhsTPDRTDHpsvRjdNtzJJJdhqwcdqc
VbhRbZgRHMFhQpHd
fvlqPzmzJJqJSPsWmPTNddNFHbNFGHNTHSbc
CqzlfqrCnbrBZjBr
SNSrDZFHnTqFsFddsCmsMC
ctVthlGjfhGljcCJmcqMCqcqBB
VtjvtjhhPPtWqVPLjvqjLVNRppRTvNSnbnZRZTHRnpTD
fzsBSsNBMNMszNGGJvgjjPggzjdFPgpJ
bmrVVVrmRrrvRmwvqlbHTDgwdLFjQPJPFddwJPFggj
HHHrZqhqbTMcZBCZfvcN
tzsJsnsmBzlVqjssZZrg
MQZHfNCffpMfpGSpPvpfCGCTTVwFTlwrggjSgqFjVjTwwg
NfMGGGPZpvLDvLCGGfQHMpZRDRWchRRtBBzmJnmzmnBznb
BSRBjtNjZrsjRjjNsVBjbrMwCgGCCwCdHrlcdccGcH
DJTTJLpFnFLdJJqPLTWqLTpwHzCGccCzvvcHwMvWzggCMC
PmpTTdndmmLqfLTTLDqJVBssbbStVmjjSsZNsBZm
ddCnZvCDSgghFhbbmFVQ
JzlMcJTMMPPfJJfsMsjWlHVhLbQVlFWmHbbb
BPwwsPfsqszfFqppwTsqzpntDSnCBnDRZrSZdnDdtvZD
SllzzPplWldwLGlzbtPZZjVScnnNSjnNsqNqsc
BrCfFDJFDHBhJCChQFhCCBDcTnNVpZZcNcvQTcjvvcTcZV
RCmFHJDJhCmBmRCgDCFRpmGbWWbLPlbMWzzGttzgLMbt
vGTfsZnfvfzTjsnfzTJlwqQjwmCqqMFjFFQMlq
LHtHRVLRLNtWcmVbRrPbRcwgQwgwMwClwClwrgFpwqpw
VDPtbVLBmLbLbDDNnnnzJJfJfBfvSGBn
lpPCRVVQppzHlZgzglgF
rtfttLdLdscmGtzngPHHFHFH
LPLLhfhbTDLmPdcrcWdTcDSjjRqwwbqpRwNBNpBwjQwR
dWQfCJrwvQCfFqNwRbbzVbVVLGTR
ZpZshPMzBjGjtVMN
phpSlSlDlcZpcZPrdHCFzFzFWFDWQH
tfMMZhjLlChsdsds
PHQRMHRwpRPBMvWvPRBpPdWDslGrbscTlTGcCsGddG
FqPSvHPHPBzQRBBwwRJfVtgjzntMntjJLMtJ
VBwJvwVwNbVRdPwMgWggGMgH
jDhqflDDhrqshNhdgPGHphLg
FltsrtcFrclrNqDfqmzQJQQRBzBCvCFvBR
RZsSSJDJZLDWnGDMLD
ClbnlfmpNtmgbtmMqWdjNGjLQjLqLj
gcblTlVCnVmcPrvRPFRrZs
mbJcScmbDWLmSBzwjPRTfjmmRhpl
tFFFtGttdClHVMCHFMMwTpwNjGpzPpNRRzzpPN
gCCdvZCVHsFvJnnDSglSglDn
dSndnRRvVSpLSphfqvTgWqrzqvvw
PBFQbQbDhGfjTTFzqG
tPmCJMtDDNcMVdhhVc
QVRVHCQRmdTRqrZFCWrLZNZFbb
ncncsPnhslBRSSSbFhtbZDLMbLbtLb
lvflPcfPSsPzlJlPlcPBfHJQwRwHmqdVpRGGGdQmww
GTCGMCcGdgRnnbbbMLwmMz
DQFZzllWDDLwDJLnJpnp
qBVrNNlZfFNlWlWqfRzhgvhCqHRdCGGSvc
ZnMnGbLZfJcBcLTgWF
dHJjdzqssHHNJwCHpHtDccvtBTtvccWWrrTWSg
CmlqCNzCzHlmdsqzNzRhMhZRbZMPmRfRJQPb
LsLLrFLcFjrtmZhhmhHGhJGGhH
ffvbsbWpSBSSCCQbsSBSwwJHHvhZHHGdGVGlMlTVdZlT
pSzWNPSfCwWNPBfsFqtFLtsqRzqFgj
hwwpvjVppGpwWGLrcPjrbrrdbjdL
FBqFFMFHHsHssNHtslqtFmldnnLrPhMnccrnMzZnbLgPLz
mJBSstlJQpwGSVhC
cgJDVWsrWggpcHhMzwwPnQMWMm
SZGBjdBqBBjGjjqNGfGNNHPnRSQFzhnwmnQzQnPHMR
bjjCZddjZbZBCtLhCZhftrgJglcTlJgvTllJvDVDLg
QpRJpCFdpqTQcqSTBBGBZVjZjVjFvwVB
nnnWfnHhPDlDnlLwGjBBbVVZGbCGbP
LhhLMLMrMWMrCprTqpJQpz
dqGGZJdZbTTMFFTGJFFbMdnCHSdWcmNmcCdWSggfSW
QsjjtrzLrQwDPjrQLrCfSSnmCmHWlCgmzlNl
PQpQPjQPsBstLBPttDrjBwTZMFMZFvJFJhMhnMJqpTJJ
JMLrSvHJdJvvJfrHMJRfWzWDFPwCcWqRRRcq
ljZsZTmmtTBlpTlTjQZCtNFPVqDRwWwWWVPcDRVpFRDz
mBgQgNNTNvrvJSvgCb
DWbWtzWDfDffbsMbZMffDDLncnnCJmLVsJJJnhgcngLs
TjgNGSBRTRTQrFRjFGBVLwLnnNncCLLCCcmhPC
GgGjvgddvvWqqfdZftWH
zMmsQlMfQQMhjsmjfsmHlhncRRZnRRRJRvZWWnhccdRC
BptFtDSSrTrpgtgqqgtZtvVVdVvccVnJdVnG
qpgPqBLDNTgqBrSLpDBMJfjzmbJMHjLMfjslzH
DPgLgPhfNDRqhDFDsBTtrrrdbbztCbtf
MjGSScGVGSlJjbbrtTvdzsTq
JJwJGWMZwMlWnFFgqNQFpF
WRGDHmGqWHlrmtVVVRVqpNZvZvvvTNPMPjbPdM
BwhBwsnzwhzSfCfswFvpvTzTdpMpjvPMZNTb
LFFQgnbfChSFBhFnftRRLrttDmmRJHtlGH
MhqhRHmDdRlRlGnfZbJVsNNZDnNb
QwvzgtwvFpmjwzLjFLJZrsZbPfPZbsVpfPsb
gvjTzBLztLTjwFjtgLTgtzwdWRqdqRTMSWcWTmWlqdhHHm
ZfzzfmhdpNLNBDDsFfQVCDggfV
HPFjljSnHrqVDgtgQgQMqC
rGnSJHvjSwGzwFhGZG
HqmHRDprrNTZTMbh
CJvzQRQVQCgNzZbzgMNd
vPCvFPcfQFlSJBcfRcPHmDGqWGDqpGtjjtGGHl
wcfpJVHfJBffBBGWRprNRWWWNdhv
DzMzMPqjDnjgCMZPZjzjCjChGdvvbhNdSvrhNWSNqWRRdS
jjCTtnMTDsMBtLRQwwQlFV
JqGnVqCTpDVCTnNLgmPzdgjcGmRg
HrSBJSHblsJthsBBSBhMsrzmdNRccjLzgcLmjgPPjlLL
HSwSttbswWJrbrSWppvVqvvnQVppQQ
JDCHssRTTwcRJDcnCDzRHsHNPZGBtPzFPSPttZSZGBqPBZ
vWhLmTlfrhFqGWSNQNqF
vpMhhpfvmTfhvbLhhgvmgvvlCCJCCMnDnDCnsjRMVDMDswCC
ZgjdlmlmmlJgHJlbZrSDrnrMrmLLDFprmp
TvqdTtdctvvDrGGSDn
CWPBhtWqPPwcdVwlNJfVVNNbbb
vgmrrwlPPrwPBPtmvFcMMrsMSJHscJcMSHDH
TWdLnZjCLGLMQLHBLS
jqVTTZqjdTVjNFNPqBvgvBNl
jmcgMzsmjmfvJwFpFfRWZRWp
drdSldTmCmTDCNCtbRRWqRwtttFZpZWZqw
NLCVLNLTbbTrQNQDvnzschgghnmnHQcH
sRVhVQDVDQRRMQhsqtRRNzqzbNzRqNGp
WdjCLHLjdFnCCnjnFnLHHmPmNJbztJJpprBpbGzbpJbqGWtB
CCFFCnFjdnjCTHmCLTLLCnFnQVhQQVDMhQQVgZZNVVDDsTVh
cGLzZgfzcNNzzRZvjvRmVDmmqCCDSdVVChVnDf
QstsPlWHQlWhMMtpsbtpQtlpDqBVqPSCSVnTTqmVdDVDVdBV
stptQFJrHptlQsFJMHtHhFbvNwvjLGvvNgzgjcwczzJcNJ
SQHCrCFPJZcnWrqn
vfJvJjfGGDggqZGcWD
pjLpRwzhRFtHdMQJ
HNSHNDvnvdffDNfqdZfdStcFFMGmmrRBcmFcrMrqrWFB
VblwzwhwPLlCGGzgzhmFjbjFrMFrjFBmbcrM
hlVPTCCQCCzVlPzhGgPVJCpHtdtSpQSZNNfnZdSSdnSD
cBVmfwqwmWggTRmQzTQl
CDnnHjSDPLCSCLHLHCHNCDFgwJljFQRRhlglbzJFQQhl
GptHLtNGHtCHSnCMtGWdcsqqWwMcqvdsVwfd
HsMFNRNWnbWfZLzWzQ
PqrpjqNdjjhPcdbpvmfzfbffbzmv
GjhhcPjPccVrqcPCldCjssHNnTnNttRwwVMTHMnV
jjCcBswcfnwgpPFPwFFGSFSwFb
VvmVhVvRRQqttRtQDLzLhqRlrBFMWrGPBSMSZSMFqBWZZP
mvQmLRvJtBJVnTcJCjsjsdgp
qgqvPbdMDMMPwpbLFGwtNlNF
TTQmdJTnSllFGtJNtw
CSSHmQHfmVcHjQmSvPBdBDDWMVhMhRMB
WCvQNZdhCDnnPfQPfTzjHcppsHjpsSjHNS
mFMgMBlMmBqHjjBfTjHzBc
grJbrqfqMVFJrlJrtCtvhPPQdnvnnvnwdW
FdQQJRdfSSfrJsRZfFsRSvtDBmDHGtGqbgvnmbDnvDGq
lcMzjCPTVtMqgWWGqn
VpLjcVPczhzznPLcPhTwFQFRZNfFNrNZFpZNsZJR
VWgJhmdDdJDdVPggPSTSTWvvfRzfFfFbNb
jCQtnpGQrHMctnpzRbFfgSwHvgwfwv
ntcMcqLMcQccQLgjBPLdhZDVlJPVdDLJ
RnPnwtqHnJthjLMcWWncMn
msdCrCdNpBBsCrlNTpNBDNGzcLchQjFQzccQLQpzLzWtFS
sTbdTBNrTCTTBCNBlVbwgVPJHtPgPvqgff
QmBsmpmcZQNqPqVnPFVpGh
gDDMDLMJgHfJwJMzfTfdGLhChPtvnGRPRRLFGPGv
DTlzgwfDrrrMWlncbscNnlSW
tBwvGHFttrFrvRgRhCmCmwQmMg
JWbNJZjzfbVjWjBhqfmSnhqCqgnQ
ZZJJJbclzJcsTPdvTTPTBFtHDF
LszmFTFpTmszLrpqSmFpzcvQjtQjvLJgJtcBjgtJjj
VHNwwNCVCChddfwHlWdnlnGRQPcQjRvMWBJJtMMWcvPJMM
nGHNVHhnfnHDNhCfdhNNlwHvmpDrZDmpzmbZSZFsmmbqrrsz
#+end_example

** Part 1
To solve this, we just need to, after parsing the inputs, split the rucksacks
in half, apply an intersection between them and using the result, convert the
character into a priority value using the ~ASCI~ value for the character.
After that, we can reduce the list of priorities into a sum.

#+name: priority-sum
#+begin_src emacs-lisp :var input=example-input-3
(apply '+ (mapcar '(lambda (r) (let* ((len (seq-length r)) (m (/ len 2)))
                                 (let ((p (car (cl-intersection (string-to-list (subseq r 0 m))
                                                                (string-to-list (subseq r m len))))))
                                   (if (> p 96)
                                       (- p 96)
                                     (- p 38)))))
                  (split-string input)))
#+end_src

#+RESULTS: priority-sum
: 157

The overall complexity of this algorithm should be ~O(n)~, as the length of
the input string for each rucksack is limited to at most ~26+27=53~ elements
as we are told the elf only failed for exactly one item. this leaves the
complexity of the ~intersection~ function (which depends on several calls to
~membership~ checks). This makes the constants for the complexity a lot higher
so when run with other intersection algorithms that use hashing or similar
methods we could see great performance gains.

#+call: priority-sum(input-3)

#+RESULTS:
: 7581

** Part 2
This version is similar to the first part, as it also requires us to use set
operations to figure out the item type that is an intersection between all
three groups, and then the priority value comes in just as before.
Here we use the ~cadr caddr~ functions which are created as macros that evaluate
to ~(car (cdr l))~ and ~(car (cdr (cdr l)))~. The ~car~ and ~cdr~ functions
take the head and tail of the input list, so we can translate ~cadr~ into
/the head of the tail of the list/ and ~caddr~ into /the head of the tail of/
/the list obtained after taking the tail of the list/ which in turn translate
to taking the first element with ~car~, the second with ~cadr~ and the third
with ~caddr~.

#+name: group-priority-sum
#+begin_src emacs-lisp :var input=example-input-3
(apply '+ (mapcar '(lambda (g) (let ((p (car (cl-intersection
                                              (string-to-list (caddr g))
                                              (cl-intersection (string-to-list (car g))
                                                               (string-to-list (cadr g)))))))
                                 (if (> p 96)
                                     (- p 96)
                                   (- p 38))))
                  (seq-partition (split-string input) 3)))
#+end_src

#+RESULTS: group-priority-sum
: 70

The complexity now is the same as before ~O(n)~ as the intersection function
is applied twice over 3 limited length lists, and the ~partition~ can be done
in linear time.

#+call: group-priority-sum(input-3)

#+RESULTS:
: 2525

* Day 4
Example input:
#+name: example-input-4
#+begin_example
2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8
#+end_example


Loading the puzzle input from a file:
#+name: input-4
#+call: input-loader("input4.txt")

#+RESULTS: input-4
#+begin_example
33-62,26-62
49-89,49-88
2-4,3-92
7-98,7-98
6-74,6-73
78-79,13-78
90-95,95-95
62-66,56-67
2-93,4-92
12-64,11-11
7-83,5-91
20-87,20-88
29-93,26-92
19-20,20-31
62-62,7-63
9-83,9-84
8-27,28-95
6-49,6-48
7-71,65-71
90-96,19-89
13-97,98-99
17-75,75-76
90-91,44-90
5-62,24-92
45-76,46-76
9-22,23-23
93-94,35-93
32-34,33-48
43-44,6-44
79-86,80-86
7-7,6-93
77-82,83-91
59-60,32-59
7-27,7-7
2-23,22-23
35-35,6-36
32-34,11-33
24-35,28-34
37-62,62-64
9-18,18-18
8-53,2-7
2-99,1-99
15-95,65-94
17-71,6-18
38-71,13-63
6-77,4-9
1-99,2-98
13-67,13-66
45-87,45-86
13-59,12-82
18-79,17-19
83-83,36-83
38-77,38-76
17-17,16-41
78-94,79-94
36-87,6-91
30-38,29-29
54-56,22-55
43-43,37-43
2-99,1-1
16-88,15-17
13-14,2-14
26-57,26-58
19-86,19-86
97-98,67-97
1-92,2-92
1-3,3-77
25-54,54-54
44-53,46-60
16-74,74-74
4-7,8-28
96-99,95-99
37-70,36-80
59-68,60-60
47-95,29-87
91-91,68-91
18-91,19-90
16-27,5-28
94-96,63-95
3-20,19-73
18-74,8-80
6-71,3-72
52-71,53-93
6-8,7-97
68-77,22-78
29-76,30-30
13-98,13-99
7-73,3-74
64-98,16-74
20-78,9-21
17-65,18-18
71-96,27-96
55-91,46-56
93-96,5-92
15-15,14-77
18-49,17-49
77-78,70-77
31-88,31-87
38-85,57-86
39-87,87-87
26-77,76-77
1-1,3-47
5-96,95-96
25-78,15-60
11-84,84-84
22-30,22-30
6-85,83-86
32-40,32-39
4-97,4-97
34-90,26-91
23-68,23-67
41-51,30-33
21-83,22-82
21-85,1-74
72-74,6-73
6-6,5-94
10-83,10-83
11-85,5-12
81-82,82-82
4-82,82-82
25-89,25-25
70-79,74-78
17-51,26-50
7-70,6-70
21-81,21-80
72-88,71-71
68-72,21-73
74-95,73-75
15-94,12-13
47-96,48-96
58-70,10-58
69-69,63-69
7-95,7-94
13-66,13-65
1-18,2-18
4-90,4-89
24-84,23-23
89-90,14-89
8-10,7-16
16-18,21-96
19-30,1-29
78-99,9-97
2-9,6-19
58-82,53-85
51-96,51-97
11-70,69-70
1-2,2-95
93-95,41-94
95-95,10-96
18-18,17-48
1-99,2-2
66-68,67-98
5-7,6-90
49-94,50-66
12-41,2-91
10-93,93-94
27-51,27-52
9-15,15-99
16-47,15-48
11-89,25-85
39-77,7-64
9-91,91-92
65-66,22-66
9-83,9-31
8-78,8-77
2-98,2-99
33-53,25-50
11-91,9-97
46-90,2-91
69-70,70-95
39-53,15-39
63-85,64-85
15-82,13-13
38-55,56-56
14-34,14-33
28-47,24-46
8-98,7-98
24-35,27-98
44-67,45-64
65-90,65-91
23-89,21-24
1-2,4-48
12-97,13-89
11-91,41-90
72-72,11-72
5-61,6-75
25-77,25-78
1-98,5-96
22-57,22-56
69-92,25-69
6-85,5-85
46-48,19-47
19-25,24-94
6-96,3-12
18-67,67-68
42-43,42-96
95-95,74-95
20-38,37-68
2-72,2-73
21-23,25-71
4-29,4-29
87-88,41-88
59-66,66-92
54-95,54-96
5-88,88-88
73-74,46-74
12-13,12-41
5-11,7-12
62-64,18-63
98-98,2-98
69-77,28-70
7-62,29-61
7-7,6-98
35-94,9-35
77-78,77-90
10-10,9-86
26-32,4-26
79-92,27-85
40-88,41-82
20-58,15-59
64-97,63-65
6-23,2-24
11-15,13-14
16-88,15-26
35-77,36-77
47-94,25-48
17-54,5-53
97-98,98-98
9-87,35-86
46-89,2-46
11-49,33-48
41-80,40-98
11-95,10-10
22-71,11-71
14-63,64-64
49-51,50-97
1-81,82-82
36-93,1-93
38-80,38-39
41-66,10-65
20-44,19-21
42-98,41-98
65-78,66-77
2-5,4-96
15-62,62-63
7-85,6-8
46-82,45-81
45-47,46-85
18-39,37-44
40-64,63-64
24-49,24-48
64-94,63-63
22-23,5-23
13-96,12-12
43-75,43-75
15-96,70-95
42-43,42-53
64-66,42-77
86-94,88-93
35-94,9-93
5-98,6-6
21-97,20-20
7-99,8-8
12-12,11-88
6-48,7-48
60-73,61-73
28-56,27-79
39-61,2-64
78-78,28-79
35-97,13-96
8-97,9-90
6-96,4-4
23-98,22-97
11-78,11-79
37-92,37-92
33-66,32-67
27-88,87-88
32-89,90-90
7-96,7-97
10-98,10-10
2-83,82-84
2-13,13-82
23-27,22-24
46-85,47-89
16-71,70-71
4-79,3-76
96-96,1-96
15-89,15-88
22-32,26-82
21-21,20-21
5-67,6-68
46-60,25-61
56-95,34-99
11-74,11-75
2-14,14-97
4-97,11-92
19-34,18-18
4-20,5-33
91-91,68-91
2-99,1-2
68-87,68-86
3-98,3-3
91-99,9-90
21-58,26-56
33-70,34-64
81-81,82-83
49-66,48-50
10-11,11-62
7-92,29-83
19-89,88-89
7-42,42-90
60-76,76-99
51-53,52-91
33-56,34-57
5-88,46-87
15-96,15-95
8-27,27-95
96-98,38-96
9-40,41-43
68-83,68-82
5-11,7-93
50-50,8-50
26-69,68-70
23-44,13-82
90-94,93-95
1-95,1-96
29-31,30-83
49-81,48-50
41-70,42-70
10-73,11-72
9-10,16-18
72-73,1-73
47-71,47-48
4-97,23-96
10-96,10-96
15-43,43-80
57-82,18-57
4-19,2-2
46-81,38-82
55-72,24-55
63-64,60-64
12-99,22-97
31-62,53-67
41-87,67-86
30-30,31-82
20-34,19-35
76-77,43-77
25-52,32-53
50-95,51-98
50-50,49-75
4-91,90-90
61-89,60-89
4-93,4-94
22-93,22-94
50-66,49-58
22-89,23-88
20-94,33-93
12-30,11-71
11-54,11-75
6-60,5-6
36-45,3-46
84-96,31-83
25-25,25-29
17-18,17-30
45-69,45-70
64-98,65-65
5-60,16-59
81-81,25-81
23-69,66-70
34-97,35-96
7-90,6-97
76-79,75-75
27-97,27-96
14-34,23-32
28-95,94-96
36-68,36-67
25-27,26-96
93-95,67-94
29-91,30-30
57-58,29-58
44-65,43-45
2-16,16-34
15-99,16-43
33-62,33-62
1-79,1-80
60-96,60-97
28-28,28-50
90-94,33-89
14-51,13-15
3-76,3-77
21-48,25-87
23-25,24-97
74-76,74-75
34-36,35-74
78-96,79-96
3-94,5-90
81-95,81-94
62-70,61-73
55-55,20-55
88-90,6-89
88-88,3-89
14-99,13-15
6-78,29-77
63-73,72-73
38-38,38-87
5-93,5-94
66-90,45-94
42-68,41-43
62-90,86-90
16-50,15-31
80-81,63-81
49-62,38-50
70-90,53-96
19-19,20-81
7-16,15-75
9-98,92-97
29-95,28-95
99-99,1-97
39-96,40-40
1-1,2-99
24-28,7-23
9-57,8-74
27-31,26-27
6-93,5-93
39-89,38-40
43-84,84-85
3-69,2-2
24-88,87-88
6-97,2-96
5-93,4-5
43-43,44-86
17-73,17-72
85-86,28-85
9-35,35-36
14-93,13-22
62-64,30-63
71-71,48-71
48-88,49-78
13-57,58-96
21-81,10-19
37-39,36-37
14-17,10-15
23-74,73-75
4-29,1-5
2-96,95-99
13-82,12-13
51-98,51-97
21-21,20-37
17-68,17-69
32-49,68-74
55-73,49-74
11-53,10-12
2-4,3-99
55-56,53-56
14-24,13-25
19-58,18-58
62-87,62-86
11-93,93-94
44-64,43-80
2-82,3-82
37-38,33-38
97-98,18-98
12-47,46-47
5-95,4-96
22-98,16-21
1-70,69-70
8-93,8-92
36-89,36-90
84-96,82-86
38-38,37-89
77-96,96-96
80-82,23-81
48-92,14-49
80-80,5-80
49-80,20-81
77-85,76-78
6-6,5-90
42-97,42-96
98-99,45-99
25-95,94-96
1-66,7-66
43-44,44-65
14-71,3-82
4-11,4-49
31-43,33-42
65-99,9-66
48-98,98-98
4-78,5-77
21-38,22-22
5-99,99-99
1-1,3-17
53-97,17-54
8-57,7-7
83-95,25-96
43-49,42-42
80-90,81-90
33-65,34-60
48-65,11-66
4-99,6-92
7-60,6-60
3-47,47-85
27-59,26-28
57-76,73-77
52-60,51-72
2-99,98-99
37-70,70-70
19-95,5-12
1-98,1-2
84-89,39-85
24-89,89-98
15-16,15-24
10-10,9-77
9-39,8-58
13-73,13-74
32-60,13-61
55-70,57-65
54-56,42-55
2-27,11-26
9-83,8-85
39-40,12-39
50-52,15-51
97-97,4-97
58-59,2-58
36-37,37-85
32-77,31-33
73-96,6-94
84-86,52-85
24-26,25-75
2-79,1-2
36-36,35-68
6-50,5-50
6-94,94-95
6-28,3-29
53-53,33-53
5-98,95-97
33-91,34-34
18-83,84-98
41-41,3-41
34-90,89-90
73-73,4-73
56-57,57-78
2-4,4-94
61-70,53-71
73-74,74-74
3-99,5-98
7-66,66-73
4-13,12-13
71-79,70-80
58-93,57-59
7-90,8-90
53-94,22-53
9-47,10-47
19-99,37-98
55-55,55-55
48-84,28-85
57-90,57-88
70-70,3-71
6-68,6-68
1-4,5-97
12-42,13-13
2-78,2-77
29-61,7-86
71-71,43-71
63-74,42-75
83-83,58-83
4-20,3-4
30-92,31-31
2-15,8-40
13-69,12-14
81-82,21-81
33-45,33-44
87-92,18-88
52-96,95-96
10-53,11-52
81-95,81-96
8-8,4-7
4-99,3-5
51-77,52-76
17-89,16-16
19-21,20-80
1-3,2-94
96-97,3-97
50-58,57-86
38-98,38-39
8-97,5-9
11-96,95-97
28-43,27-44
21-26,20-25
58-97,12-92
1-3,3-88
11-47,10-72
1-71,3-85
40-40,39-97
3-89,3-90
7-92,37-91
73-89,61-90
61-80,28-92
61-62,11-61
19-80,19-80
4-6,5-78
6-54,16-81
92-97,20-91
61-62,5-62
40-65,39-39
57-66,54-67
2-98,3-76
13-99,12-88
96-97,2-97
46-56,56-57
7-94,11-94
5-78,4-5
31-71,31-79
47-47,48-83
72-91,72-92
36-37,37-70
57-98,98-98
7-99,7-98
2-99,2-98
27-96,95-96
19-27,28-93
1-9,8-52
92-92,1-92
38-84,84-85
94-97,22-95
19-37,32-36
4-17,17-96
27-80,28-99
40-60,59-60
8-96,8-97
16-75,15-36
33-73,34-73
54-76,75-76
49-87,86-87
11-38,38-91
40-69,68-69
39-41,40-40
90-90,64-90
11-82,12-56
28-90,89-90
90-95,8-91
9-92,10-91
10-98,28-97
29-30,30-91
26-91,26-27
7-91,69-92
21-93,22-63
6-8,7-35
71-71,63-71
39-47,13-48
15-79,15-15
9-73,9-73
46-69,17-88
16-97,18-86
8-65,64-65
1-44,2-43
33-78,32-32
23-97,40-97
21-22,21-74
93-93,10-93
21-22,21-42
2-5,5-18
21-51,18-37
38-92,47-77
83-84,3-83
16-94,15-95
1-92,92-93
1-98,98-98
48-89,34-47
9-44,10-45
88-90,43-89
3-16,17-29
39-44,1-40
41-67,38-75
2-6,1-7
8-67,9-55
42-60,42-61
18-52,31-51
46-47,47-74
24-69,23-24
30-30,30-31
1-84,83-84
2-87,1-87
9-50,9-51
28-83,20-34
19-47,40-51
3-86,4-4
17-79,1-2
26-75,25-75
8-16,17-54
35-90,42-97
1-18,23-62
2-12,1-39
13-90,12-96
71-91,71-91
23-60,12-24
26-84,54-83
18-24,18-25
18-56,23-55
32-59,31-33
35-52,34-81
22-72,22-71
8-38,7-37
34-69,69-69
10-79,15-68
16-87,24-28
20-50,8-51
6-52,52-84
86-86,21-87
26-94,26-93
63-82,63-81
5-18,17-91
7-18,7-28
10-36,10-95
44-96,9-84
48-51,49-62
90-98,89-98
31-31,32-56
75-75,74-75
28-80,79-92
7-63,26-62
4-5,5-18
40-84,21-85
43-51,42-44
4-91,35-95
51-73,51-52
4-51,51-51
80-80,52-80
46-85,19-84
9-11,10-36
32-33,33-90
3-92,4-92
6-96,5-99
77-78,66-78
7-31,9-87
11-70,32-69
46-57,25-74
4-42,41-42
28-92,91-92
7-23,21-22
7-97,17-97
12-94,6-13
59-84,59-83
46-46,47-78
10-99,9-99
1-73,13-72
1-73,2-2
15-91,16-84
4-84,1-85
3-98,2-98
89-89,2-90
16-96,16-96
30-69,31-70
16-68,73-89
13-30,12-29
27-97,98-99
58-95,8-94
18-18,17-83
1-55,3-55
37-43,42-89
1-89,1-90
51-53,23-52
50-57,58-91
95-96,25-96
41-41,27-41
26-76,59-77
85-87,25-86
14-62,15-63
98-98,51-98
81-98,50-97
1-72,2-73
1-4,3-64
12-82,11-97
6-24,24-24
55-85,54-65
6-68,67-69
2-3,3-73
4-91,4-86
36-99,35-99
10-79,21-78
20-39,39-97
7-82,6-8
58-91,38-58
13-63,14-39
42-44,43-96
84-95,82-84
29-65,30-65
44-58,57-58
8-34,34-35
11-36,11-35
26-94,72-93
12-26,14-88
3-91,4-89
6-6,5-99
96-97,95-96
38-51,30-45
20-98,21-77
16-98,16-97
5-97,12-12
14-25,25-92
30-65,30-31
52-53,35-53
71-73,22-94
6-96,3-99
8-42,7-7
28-96,29-97
67-91,90-92
3-95,12-95
8-98,9-9
27-27,26-87
7-79,78-79
36-90,36-89
84-85,21-84
69-69,68-92
19-98,61-99
16-98,98-99
1-96,95-96
16-84,16-85
18-87,87-88
92-97,85-95
13-83,83-84
20-67,3-21
23-71,55-72
62-97,61-61
82-91,51-81
24-25,25-93
58-58,59-99
39-93,38-93
7-64,14-63
35-99,36-98
89-89,29-90
77-78,67-78
3-90,89-90
26-90,26-89
22-38,22-37
66-66,65-94
71-75,68-74
47-93,7-93
9-90,73-87
39-39,38-82
27-40,33-39
66-93,67-92
9-86,86-87
13-95,34-94
47-78,14-46
2-96,2-96
4-30,23-29
9-88,21-89
2-61,2-60
15-69,15-68
20-91,20-90
38-77,70-76
8-65,9-9
96-97,14-97
55-67,67-67
12-78,26-83
1-95,1-1
56-99,64-98
1-56,13-57
14-84,8-96
37-38,38-76
4-99,5-5
46-87,27-86
80-80,4-80
9-25,25-78
33-85,34-35
26-77,70-76
68-98,67-98
8-12,17-66
2-41,2-42
8-46,47-47
8-92,5-8
1-5,5-98
6-94,7-7
96-97,73-96
19-51,50-51
30-95,31-85
16-91,17-91
11-13,12-62
2-99,3-99
44-91,58-90
28-63,1-18
46-92,19-52
37-54,3-55
67-68,68-82
2-99,98-99
8-40,40-40
7-58,6-58
9-75,9-75
4-39,39-39
16-70,16-71
27-82,81-82
38-83,38-82
4-76,75-97
5-42,6-41
43-82,82-82
27-27,26-77
14-14,13-74
17-87,87-94
14-78,13-62
54-85,53-86
1-15,1-95
69-79,70-74
5-86,10-85
29-39,49-78
41-99,41-42
15-95,14-15
32-78,33-78
16-94,21-93
5-5,4-94
1-65,8-64
2-99,5-98
34-59,38-58
36-43,7-36
5-21,20-62
11-92,7-7
23-91,24-91
6-90,5-91
18-60,15-64
40-87,39-41
58-81,57-58
3-88,4-88
49-50,32-49
28-34,27-90
30-38,5-31
8-91,7-92
43-81,44-81
10-97,9-99
3-86,2-3
80-98,4-92
2-2,1-99
15-41,15-42
27-28,27-83
9-83,4-10
48-90,47-90
31-67,2-32
80-80,5-80
10-85,10-84
30-84,29-29
16-45,17-45
34-35,34-41
28-30,29-68
9-25,25-69
65-66,56-66
19-36,20-20
53-53,53-98
6-22,10-60
29-29,28-93
20-56,54-55
8-83,8-83
13-87,87-88
40-81,24-66
82-83,30-82
68-70,1-69
88-89,20-88
1-99,2-99
4-73,5-55
71-72,18-72
47-47,28-47
53-69,52-69
14-29,28-29
53-82,83-87
3-4,10-19
59-93,1-92
23-94,23-95
27-56,26-26
58-94,57-59
87-87,49-88
75-78,69-89
18-96,19-87
3-98,90-99
29-45,45-58
2-66,58-65
15-76,14-88
2-92,92-92
31-79,32-79
9-98,9-99
7-90,6-99
19-19,18-72
86-86,85-98
10-13,12-93
2-47,48-51
9-62,1-9
6-95,6-94
4-98,7-97
80-99,99-99
34-71,50-57
48-67,31-66
53-88,53-53
5-55,5-54
56-60,55-55
13-45,12-45
4-78,5-45
52-84,84-84
52-98,52-97
7-8,9-92
1-98,2-17
42-79,9-80
57-64,38-59
31-37,37-72
21-99,1-25
#+end_example

** Part 1
For this puzzle, other than parsing the input, we need to realize what does it
mean to have a fully contained interval, that is, the starting number and
ending number of the smaller interval must be less then or equal to the
starting number and ending number of the bigger interval. We can check this
by first finding the earliest starting interval, this must be the /bigger/
interval for us to have a full coverage, so we check that the other interval's
start and end is contained within the earliest starting interval.

#+name: fully-contained-amount
#+begin_src emacs-lisp :var input=example-input-4
(defun split-dash-number (in)
    "split string by dash and convert to number"
    (mapcar #'string-to-number (s-split "-" in)))
(apply #'+ (mapcar '(lambda (g) (let* ((r (mapcar #'split-dash-number g))
                                       (s1 (caar r))
                                       (e1 (cadar r))
                                       (s2 (caadr r))
                                       (e2 (cadadr r)))
                                  (if (or (and (<= s1 s2)
                                               (<= e2 e1))
                                          (and (<= s2 s1)
                                               (<= e1 e2)))
                                      1
                                    0)))
                   (mapcar '(lambda (l) (s-split "," l))
                           (split-string input))))

#+end_src

#+RESULTS: fully-contained-amount
: 2

The overall complexity of this algorithm is ~O(n)~ as we only scan through
the list of inputs once, doing ~O(1)~ comparisons.

#+call: fully-contained-amount(input-4)

#+RESULTS:
: 588

** Part 2
The second part covers a broader problem, where we are not trying to find only
the full coverage, but only the intervals where there is any overlap. We do
this by checking that either end of both intervals are contained on the limits
of the other interval, /e.g./: for intervals 2-4 and 3-6 we check:

1. ~3 >= 2 >= 6~
2. ~3 >= 4 >= 6~ ***
3. ~2 >= 3 >= 4~ ***
4. ~2 >= 6 >= 4~

Where you can see that both ~2.~ and ~3.~ indicate an overlap.

#+name: overlap-count
#+begin_src emacs-lisp :var input=example-input-4
(defun split-dash-number (in)
    "split string by dash and convert to number"
    (mapcar #'string-to-number (s-split "-" in)))
(apply #'+ (mapcar '(lambda (g) (let* ((r (mapcar #'split-dash-number g))
                                       (s1 (caar r))
                                       (e1 (cadar r))
                                       (s2 (caadr r))
                                       (e2 (cadadr r)))
                                  (if (or (and (>= s2 s1)
                                               (<= s2 e1))
                                          (and (>= e2 s1)
                                               (<= e2 e1))
                                          (and (>= s1 s2)
                                               (<= s1 e2))
                                          (and (>= e1 s2)
                                               (<= e1 s2)))

                                      1
                                    0)))
                   (mapcar '(lambda (l) (s-split "," l))
                           (split-string input))))
#+end_src

#+RESULTS: overlap-count
: 4

The complexity doesn't change from the previous algorithm and is still ~O(n)~.

#+call: overlap-count(input-4)

#+RESULTS:
: 911

* Day 5

Example input (I cheated and changed the input shape to make it easier). The
input has each stack in top-down order on each line.

#+name: example-input-5
#+begin_example
N Z
D C M
P

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2
#+end_example

Loading the puzzle input from a file, it was also modified.

#+name: input-5
#+call: input-loader("input5.txt")

** Part 1
For the solution, we need to separate the input between the stacks and the
instruction list. We use a ~plist~ from ~elisp~ to make object access and
override values easier using key/value pairs.

We also treat the instruction removing fluff like the words /move/, /from/ and
/to/. Then we are left with two things, the list of instructions and the ~plist~
with the stacks ordered by number. We iterate over the instruction list,
repeating the moving (pop from one stack and push to another) and overriding
the stack list with the updated stacks after executing the instruction.

At the end we reduce the stacks to print just the head of each in a string.

#+name: crates-on-top
#+begin_src emacs-lisp :var input=example-input-5
(let* ((input (mapcar '(lambda (r) (delete "" (s-split ":" r)))
                      (s-split "::" (s-replace "\n" ":" input))))
       (stacks (-interleave (-iota (length (car input))) (mapcar '(lambda (s) (split-string s)) (car input))))
       (instructions (mapcar '(lambda (i)
                                (mapcar #'string-to-number
                                        (s-split ":"
                                                 (s-trim (s-replace-regexp
                                                          (rx (or " from " " to "))
                                                          ":"
                                                          (s-replace "move" "" i))))))
                                (cadr input))))
  (mapcar '(lambda (i) (let* ((o (- (cadr i) 1)) (d (- (caddr i) 1))
                              (oStack (plist-get stacks o)) (dStack (plist-get stacks d)))
                         (dotimes (n (car i))
                           (if (car oStack)
                               (progn (setq dStack (cons (car oStack) dStack))
                                      (setq oStack (cdr oStack)))))
                         (setq stacks (plist-put (plist-put stacks o oStack) d dStack))))
          instructions)
  (--reduce (format "%s%s" acc it) (mapcar '(lambda (i) (car (plist-get stacks i)))
                                           (-iota (length (car input))))))
#+end_src

#+RESULTS: crates-on-top
: CMZ

The complexity of the algorithm above depends on 3 factors, the size of the
stack list ~k~, the total number of elements on all stacks ~l~ and the size of
the instruction list ~n~. As we can see, the initial parsing works in ~O(l+n)~
as we just iterate over the stack elements and the instruction list.

Now for the simulation algorithm, it iterates over all instructions, and for
each iteration it runs 2 ~plist-get~ instructions and 2 ~plist-put~ instructions.
As those run over a list elementwise, they have complexity ~O(k)~ for ~plist-get~
and ~O(2k)~ for ~plist-put~. Each iteration also loops for a number of elements
that in the worst case could be the all the stackable elements (that is, ~l~).
So the overall complexity of each iteration is ~O(k+l)~ as constants don't
matter much for this analysis. The overall complexity of the simulation is then
~O(n*(k+l))~, as the last reduction step is less than the iteration and can be
simplified.

 #+call: crates-on-top(input-5)

 #+RESULTS:
 : FRDSQRRCD

** Part 2

For the second part, we can simplify the algorithm, as we don't need to loop
inside the instruction part, and we just need to /take/ an amount of elements
from one stack and just append to another.

#+name: crates-on-top-9001
#+begin_src emacs-lisp :var input=example-input-5
(let* ((input (mapcar '(lambda (r) (delete "" (s-split ":" r)))
                      (s-split "::" (s-replace "\n" ":" input))))
       (stacks (-interleave (-iota (length (car input))) (mapcar '(lambda (s) (split-string s)) (car input))))
       (instructions (mapcar '(lambda (i)
                                (mapcar #'string-to-number
                                        (s-split ":"
                                                 (s-trim (s-replace-regexp
                                                          (rx (or " from " " to "))
                                                          ":"
                                                          (s-replace "move" "" i))))))
                                (cadr input))))
  (mapcar '(lambda (i) (let* ((o (- (cadr i) 1)) (d (- (caddr i) 1))
                              (oStack (plist-get stacks o)) (dStack (plist-get stacks d)))
                         (setq dStack (-concat (-take (car i) oStack) dStack))
                         (setq oStack (-drop (car i) oStack))
                         (setq stacks (plist-put (plist-put stacks o oStack) d dStack))))
          instructions)
  (--reduce (format "%s%s" acc it) (mapcar '(lambda (i) (car (plist-get stacks i)))
                                           (-iota (length (car input))))))
#+end_src

#+RESULTS: crates-on-top-9001
: MCD

The complexity doesn't change much, as the ~-take/-drop/-concat~ functions run
over the list of elements with complexity ~O(l)~, with the ~plist-put/plist-get~
functions, the complexity is the same: ~O(n*(k+l))~

#+call: crates-on-top-9001(input-5)

#+RESULTS:
: HRFTQVWNN

* Day 6

Example input:
#+name: example-input-6
#+begin_example
zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw
#+end_example

Loading puzzle input:
#+name: input-6
#+call: input-loader("input6.txt")

** Part 1
For this puzzle, we create a sliding window of length 4 over the input, then
we check if all 4 items are unique, if so, we use 0 as the marker, if not 1.
This generates a list of 1s and 0s for each window, we then iterate over it
adding up for each 1 we found, until we find a 0. Given that the amount of 1s
represents the number of sliding windows without 4 unique characters, and that
the sliding window steps 1 character at a time, when summing this to a base
value of 4, we get the number of characters that had to be consumed until we
found the marker.

#+name: chars-to-start-of-packet
#+begin_src emacs-lisp :var input=example-input-6
(let* ((index 4) (in (string-to-list input)))
  (-each-while (mapcar '(lambda (w) (if (< (length (-uniq w)) 4) 1 0))
                       (-partition-in-steps 4 1 in))
      (-compose #'not #'zerop)
    (lambda (_) (setq index (+ index 1))))
  index)
#+end_src

#+RESULTS:
: 11

The complexity of this algorithm depends on the first step that runs over all
sliding windows. As we must look at all windows of 4 elements, this means we
look at ~O(n-3)~ sliding windows (as the last 3 elements cant form a sliding
window of 4 elements). This means the overall complexity is ~O(n)~, as the next
loop goes over at most all sliding windows until we find a 0, and the ~length~
and ~uniq~ instructions have a constant complexity ~O(4)~.

#+call: chars-to-start-of-packet(input-6)

#+RESULTS:
: 1920

** Part 2

For the second part, nothing changes in the algorithm, except the size of the
sliding window and the value of the baseline used in the final sum.

#+name: chars-to-start-of-message
#+begin_src emacs-lisp :var input=example-input-6
(let* ((index 14) (in (string-to-list input)))
  (-each-while (mapcar '(lambda (w) (if (< (length (-uniq w)) 14) 1 0))
                       (-partition-in-steps 14 1 in))
      (-compose #'not #'zerop)
    (lambda (_) (setq index (+ index 1))))
  index)
#+end_src

#+RESULTS: chars-to-start-of-message
: 26

Its complexity also stays the same as no logic changes happened: ~O(n)~.
#+call: chars-to-start-of-message(input-6)

#+RESULTS:
: 2334

* Day 7
Example input:

#+name: example-input-7
#+begin_example
$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k
#+end_example

#+name: input-7
#+call: input-loader("input7.txt")

** Part 1

This is a more complex problem, and requires us to use a hashmap. To use strings
as keys, we must set the test function for the hashmap to use content/value
and not the object reference.
We iterate over the input. We separate by the ~$~ marker, bundling everything
until the next marker, this makes knowing the result of a command easier.
We then iterate over the list of command-output pairs, and use pattern-matching
to know if its a ~cd~ or an ~ls~. For ~cd~ we keep track of the directory path
from the root, and for ~ls~ we add to the hashmap with the current path as key
and the path for inner directories and size for inner files as value.

We then iterate over this hashmap, defining a recursive function to find the
size of a directory from its path. It is crucial to use the full path as the
identifier of the directory as there can be folders with the same name inside
different folders, /e.g./ ~/a/b/c/d~ and ~/a/e/d~ where ~d~ is the repeated
name, and its size must be different for each time it appears on the directory
tree.

After this, we filter out the entries that are bigger than 100000 and sum the
overall value to get the result.

#+name: dir-tree-deletable-count
#+begin_src emacs-lisp :var input=example-input-7
(let ((dir (make-hash-table :test 'equal)) (cDir '()))
  (-each (let ((tmp 0))
           (-partition-by '(lambda (i) (if (string= (car i) "$")
                                           (set 'tmp (random))
                                         tmp))
                          (mapcar (-partial #'s-split " ")
                                  (delete "" (s-split "\n" input)))))
    '(lambda (c) (pcase (car c)
                   (`("$" "cd" ,p)
                    (if (string= p "..")
                        (set 'cDir (cdr cDir))
                      (set 'cDir (cons p cDir))))
                   (`("$" "ls")
                    (puthash (mapconcat #'identity (reverse cDir) "/")
                             (mapcar '(lambda (n)
                                        (pcase n
                                          (`("dir" ,d)
                                           (mapconcat #'identity (reverse (cons d cDir)) "/"))
                                          (`(,s ,_)
                                           (string-to-number s))))
                                     (cdr c))
                             dir)
                    ))))
  (defun size (n)
    ""
    (pcase n
      ((pred numberp) n)
      ((pred stringp) (size (gethash n dir)))
      ((pred listp) (apply '+ (mapcar #'size n)))))
  (let (alist)
    (maphash '(lambda (key val) (push (cons key (size val)) alist)) dir)
    (apply #'+ (-filter (-partial #'>= 100000) (mapcar 'cdr alist)))))
#+end_src

#+RESULTS: dir-tree-deletable-count
: 95437

The complexity for this algorithm depends on the amount of folders overall,
as in the worst case we have all of them nested, the recursion then runs ~O(n)~
times to calculate the size. Because when we are parsing the input we need to
build the path from the root for each folder, we end up doing ~O(n^2)~ overall
operations. This can be improved with caching and in the real world is closer
to ~O(n)~ as you don't have that deep of nesting.

#+call: dir-tree-deletable-count(input-7)

#+RESULTS:
: 1391690
